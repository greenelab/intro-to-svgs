I"¿é<header>
  <section>
    
    <div class="view_on_github">
  <a href="https://github.com/greenelab/intro-to-svgs">
    <i class="fab fa-lg fa-github"></i>
    <span>View on GitHub</span>
  </a>
</div>

<h1 id="introduction-to-svgs">Introduction to SVGs</h1>

<h2 id="for-academic-folk">(for academic folk)</h2>

  </section>
</header>

<main>
  
    
  
    
      <section>
        <div class="col">
  <a href="https://www.vincentrubinetti.com">
    <img src="images/vr.jpg" class="vr" />
  </a>
</div>

<div class="col">
  <p><strong>by <a href="https://www.vincentrubinetti.com">Vincent Rubinetti</a></strong><br />
  Frontend Developer, UX/UI Designer<br />
  <em>Created October 25, 2019</em><br />
  <em>Updated November 6, 2019</em></p>
</div>

<p>This is an introduction to the <a href="https://en.wikipedia.org/wiki/Scalable_Vector_Graphics"><strong>S</strong>calable <strong>V</strong>ector <strong>G</strong>raphics</a> image format.
It is aimed at people in academia and and how they might most commonly use the format (for figures, papers, presentations, posters, etc).</p>

<p>This tutorial should teach you:</p>

<ul>
  <li>What SVG is, how it works, and why it is useful</li>
  <li>The basic building blocks of the SVG format</li>
  <li>How to make basic SVGs by hand</li>
  <li>How to more confidently edit SVGs generated by software</li>
  <li>When it is appropriate to make an SVG by hand and when it is not</li>
  <li>General familiarity with the format such that you can more effectively Google a particular problem</li>
</ul>

<details id="toc" class="toc">
  <summary>
    Table of contents
  </summary>
</details>

      </section>
    
  
    
      <section>
        <h3 id="background">Background</h3>

<h4 id="raster-vs-vector">Raster vs vector</h4>

<p>What is a vector image, and how does it differ from a regular image?</p>

<p>In short: A raster image is made up of a grid of pixels, whereas a vector image is made up of shape definitions. Essentially, it is a set of instructions on what to draw, rather than a long list of pixels.</p>

<figure>
  <a href="images/1-background/raster-explained.svg" target="_blank">
    <img src="images/1-background/raster-explained.svg" alt="Raster image" class="" />
  </a>
  <figcaption>Raster image</figcaption>
</figure>

<figure>
  <a href="images/1-background/vector-explained.svg" target="_blank">
    <img src="images/1-background/vector-explained.svg" alt="Vector image" class="" />
  </a>
  <figcaption>Vector image</figcaption>
</figure>

<h4 id="benefits-of-vector-graphics">Benefits of vector graphics</h4>

<p>A vector graphic can be scaled to any size with perfect clarity and definition.
Internally, when a program displays a vector graphic, it calculates the shapes and ‚Äúrenders‚Äù them to a grid of pixels with the same resolution as your monitor.
This way you always get a smooth, crisp result.</p>

<p>A raster graphic can be scaled to any size too, but requires some sort of algorithm to interpolate what should go in between the original pixels, which usually produces poor, blurry results.</p>

<figure>
  <a href="images/1-background/raster-enlarged.png" target="_blank">
    <img src="images/1-background/raster-enlarged.png" alt="Raster image, enlarged" class="" />
  </a>
  <figcaption>Raster image, enlarged</figcaption>
</figure>

<figure>
  <a href="images/1-background/vector-enlarged.png" target="_blank">
    <img src="images/1-background/vector-enlarged.png" alt="Vector image, enlarged" class="" />
  </a>
  <figcaption>Vector image, enlarged</figcaption>
</figure>

<p>In addition, vector graphics usually have a smaller file size than raster graphics, because they are defined by a few lines of text that describe shapes, rather than many rows and columns of individual pixels.</p>

<p><i class="fas fa-lg fa-question-circle"></i>What‚Äôs an example of vector graphics that almost everyone has used?<br />
<i class="fas fa-lg fa-exclamation-circle"></i>Answer: <span class="spoiler">Fonts. Most fonts are vector based so text can be scaled to any size.</span></p>

<h4 id="limitations-of-vector-graphics">Limitations of vector graphics</h4>

<p>Because vector graphics are drawn with shapes, they are better suited to simpler, less detailed, more ‚Äúgeometric‚Äù images.
More ‚Äúphotographic‚Äù images, such as realistic depictions of people, animals, etc, are usually better captured by raster images.</p>

<figure>
  <a href="images/1-background/vector-example-1.svg" target="_blank">
    <img src="images/1-background/vector-example-1.svg" alt="Simple vector image" class="medium_img" />
  </a>
  <figcaption>Simple vector image</figcaption>
</figure>

<figure>
  <a href="images/1-background/vector-example-2.svg" target="_blank">
    <img src="images/1-background/vector-example-2.svg" alt="Complex vector image" class="medium_img" />
  </a>
  <figcaption>Complex vector image</figcaption>
</figure>

<figure>
  <a href="images/1-background/raster-example.png" target="_blank">
    <img src="images/1-background/raster-example.png" alt="Raster image" class="medium_img" />
  </a>
  <figcaption>Raster image</figcaption>
</figure>

<h4 id="what-is-svg">What is SVG</h4>

<p><a href="https://en.wikipedia.org/wiki/Scalable_Vector_Graphics">SVG</a> is the most popular general-purpose vector graphic format.
It was developed by the <a href="https://www.w3.org/">W3C</a>, the organization in charge of defining web standards like <a href="https://en.wikipedia.org/wiki/HTML">HTML</a> and <a href="https://en.wikipedia.org/wiki/Cascading_Style_Sheets">CSS</a>.</p>

<figure>
  <a href="images/1-background/svg-logo.svg" target="_blank">
    <img src="images/1-background/svg-logo.svg" alt="SVG logo" class="" />
  </a>
  <figcaption>SVG logo</figcaption>
</figure>

<figure>
  <a href="images/1-background/w3c-logo.svg" target="_blank">
    <img src="images/1-background/w3c-logo.svg" alt="W3C logo" class="" />
  </a>
  <figcaption>W3C logo</figcaption>
</figure>

<p>SVG was originally aimed at the web, but it became so popular that you now see it in a lot of other contexts too, like Word documents, PDFs, graphs, illustrations, graphic design, printed media, etc.
Keep this in mind when using SVGs outside of a browser: the context you‚Äôre using it in might not support all of the advanced features that a browser does, <em>because it has essentially co-opted the technology from another platform</em>.</p>

      </section>
    
  
    
      <section>
        <h3 id="basics">Basics</h3>

<h4 id="how-svgs-are-written">How SVGs are written</h4>

<p>SVGs are just plain text files that contain descriptions of what shapes to draw.
You can create or edit them in any text editor.
You can also use software like Inkscape or Adobe Illustrator to make more complex SVGs, but they are still saved and represented as plain text.</p>

<p>SVGs are written in a simple markup language called <a href="https://en.wikipedia.org/wiki/XML">XML</a> that consists of three main concepts:</p>

<ol>
  <li>Elements - the individual components or building blocks of your image</li>
  <li>Element attributes - the properties attached to an element that describes its appearance, behavior, etc</li>
  <li>Element hierarchy - the organizational structure of the document, formed by arranging elements in an order or nesting them within one another</li>
</ol>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;element</span> <span class="na">attribute=</span><span class="s">"value"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;child</span> <span class="na">attribute=</span><span class="s">"value"</span><span class="nt">&gt;</span>
    ...more content...
  <span class="nt">&lt;/child&gt;</span>
  <span class="nt">&lt;child</span> <span class="na">attribute=</span><span class="s">"value"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/element&gt;</span>
<span class="c">&lt;!-- comment --&gt;</span>
</code></pre></div></div>

<p>Element with children elements inside:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;element&gt;&lt;child&gt;</span>...<span class="nt">&lt;/child&gt;&lt;/element&gt;</span>
</code></pre></div></div>

<p>Element with attribute:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;element</span> <span class="na">attribute=</span><span class="s">"value"</span><span class="nt">&gt;</span>...<span class="nt">&lt;/element&gt;</span>
</code></pre></div></div>

<p>Self-closing/empty element:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;element</span> <span class="na">attribute=</span><span class="s">"value"</span> <span class="nt">/&gt;</span>
</code></pre></div></div>

<p><i class="fas fa-lg fa-info-circle"></i>Note: XML is generally whitespace-insensitive, so you‚Äôll see slightly different ways to format the code throughout this tutorial and in online examples.</p>

<h4 id="coordinate-system">Coordinate system</h4>

<p>An SVG has an abstract coordinate system with arbitrary units called ‚ÄúSVG units‚Äù or ‚Äúuser units‚Äù.
It is a regular Cartesian coordinate space ‚Äì except that <strong>positive is down and to the right</strong> ‚Äì that eventually gets mapped to some real world space.</p>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;element</span>
  <span class="na">some-coordinate=</span><span class="s">"-100"</span>
  <span class="na">some-dimension=</span><span class="s">"34.5"</span>
<span class="nt">&gt;</span>
</code></pre></div></div>

<div class="col">
  <a href="images/2-basics/coordinates.svg" target="_blank">
    <img src="images/2-basics/coordinates.svg" alt="2-basics/coordinates.svg" />
  </a>
</div>

<p>Unless specified otherwise, <strong>the coordinates/dimensions/etc of everything are given in SVG units</strong>, as plain numerical values.</p>

<h4 id="the-svg-element">The <code class="highlighter-rouge">&lt;svg&gt;</code> element</h4>

<p>In every SVG, there is a top level <code class="highlighter-rouge">&lt;svg&gt;</code> element that contains all of the contents of the image and some key properties of the image. There are only 4 attributes you will likely ever use in this element: <code class="highlighter-rouge">xmlns</code>, <code class="highlighter-rouge">viewBox</code>, <code class="highlighter-rouge">width</code>, and <code class="highlighter-rouge">height</code>.</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;svg</span>
  <span class="na">xmlns=</span><span class="s">"http://www.w3.org/2000/svg"</span>
  <span class="na">viewBox=</span><span class="s">"..."</span>
  <span class="na">width=</span><span class="s">"..."</span>
  <span class="na">height=</span><span class="s">"..."</span>
<span class="nt">&gt;</span>
  ...
<span class="nt">&lt;/svg&gt;</span>
</code></pre></div></div>

<p>In SVGs generated by software, you will often see many other attributes and elements at or near the top-level of the document.
Many of these are unnecessary, or only necessary in very specific contexts.
Most likely, they are there either to support legacy browsers or older versions of SVG.
When in doubt, just remove a line and see if it still works.</p>

<h4 id="the-xmlns-attribute">The <code class="highlighter-rouge">xmlns</code> attribute</h4>

<p>The <code class="highlighter-rouge">xmlns</code> attribute is a namespace that simply tells the viewing software that the XML document is meant to be parsed as an SVG.
It is always required, except in the rare case that you are including an SVG directly (inline) in an HTML document.
There are also some advanced SVG features that require providing additional namespaces.</p>

<h4 id="the-viewbox-attribute">The <code class="highlighter-rouge">viewBox</code> attribute</h4>

<p>The viewbox is the window into the SVG‚Äôs coordinate space, and defines the boundaries of the image.
You can think of it like a camera or a frame, or as the cropped area of the scene.
You specify the <code class="highlighter-rouge">x</code>/<code class="highlighter-rouge">y</code> coordinate of the upper left corner and the <code class="highlighter-rouge">width</code>/<code class="highlighter-rouge">height</code> of the viewbox, in SVG units.</p>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;svg</span>
  <span class="na">viewBox=</span><span class="s">"x y width height"</span>
  <span class="na">viewBox=</span><span class="s">"70 60 100 75"</span>
<span class="nt">&gt;</span>
</code></pre></div></div>

<div class="col">
  <a href="images/2-basics/viewbox.svg" target="_blank">
    <img src="images/2-basics/viewbox.svg" alt="2-basics/viewbox.svg" />
  </a>
</div>

<p><i class="fas fa-lg fa-exclamation-triangle"></i><code class="highlighter-rouge">viewBox</code> should always be specified; weird things can happen if it isn‚Äôt.</p>

<h4 id="width-and-height">Width and height</h4>

<p>The <code class="highlighter-rouge">width</code> and <code class="highlighter-rouge">height</code> attributes indicate how wide and high the viewbox (the image) should appear ‚Äì in real world size ‚Äì in its final context.
They are the only SVG attributes that should have a specified unit.
If no unit is specified, they are interpreted as pixels.</p>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;svg</span>
  <span class="na">width=</span><span class="s">"..."</span> <span class="na">height=</span><span class="s">"..."</span>
  <span class="na">width=</span><span class="s">"4in"</span> <span class="na">height=</span><span class="s">"3in"</span>
<span class="nt">&gt;</span>
</code></pre></div></div>

<div class="col">
  <a href="images/2-basics/width-height.svg" target="_blank">
    <img src="images/2-basics/width-height.svg" alt="2-basics/width-height.svg" />
  </a>
</div>

<p>Along with <code class="highlighter-rouge">viewBox</code>, these attributes essentially define a mapping from SVG units to real world units.</p>

<p>If these attributes are omitted entirely, the image will usually be scaled to fit the dimensions of its container, depending on the software.
If you specify only one of these attributes, the other dimension will scale proportionally (preserving aspect ratio).</p>

<p>In practice, it is often more useful to not hard-code these attributes into the SVG, and to simply scale the image in situ to the needed size (eg, in CSS for a webpage, or in Inkscape before rendering as a PNG).
As such, the minimum/boilerplate code to form a valid SVG is an <code class="highlighter-rouge">&lt;svg&gt;</code> element with the <code class="highlighter-rouge">xmlns</code> and <code class="highlighter-rouge">viewBox</code> attributes.</p>

<h4 id="overflow">Overflow</h4>

<p>The ‚Äúoverflow‚Äù of an SVG is the content of the scene that extends beyond the boundaries of the <code class="highlighter-rouge">viewBox</code>.
By default, the <code class="highlighter-rouge">overflow</code> attribute on the <code class="highlighter-rouge">&lt;svg&gt;</code> element is set to <code class="highlighter-rouge">visible</code>.
This can be confusing, since we previously said that the <code class="highlighter-rouge">viewBox</code> defines the boundaries of an image; and is it really a boundary if things can go past it?</p>

<p>Most SVG editing software will treat the <code class="highlighter-rouge">viewBox</code> as a hard boundary, in that when you render it to a raster image (eg <code class="highlighter-rouge">.jpg</code>), it will chop off the overflow.
But while editing, it may still show the overflow, along with some lines to indicate where the <code class="highlighter-rouge">viewBox</code> is.</p>

<p>A web browser, though, will always show the overflow, unless you change the <a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/overflow"><code class="highlighter-rouge">overflow</code> attribute</a>, or your window is the same aspect ratio as your <code class="highlighter-rouge">viewBox</code> (since browsers typically <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit">fit to contain rather than fit to cover</a>).</p>

<h4 id="units">Units</h4>

<p>It is actually possible to specify coordinates/dimensions/etc in terms of ‚Äúreal world units‚Äù like inches, but it is typically not advisable.</p>

<div class="col highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"1px"  ‚Üí  "1"
"1in"  ‚Üí  "96"
"1cm"  ‚Üí  "37.795"
"1pt"  ‚Üí  "1.333"
</code></pre></div></div>

<div class="col">
  <a href="images/2-basics/units.svg" target="_blank">
    <img src="images/2-basics/units.svg" alt="2-basics/units.svg" />
  </a>
</div>

<p>Any time a real world unit is written, it first gets converted to SVG units based on constants defined in the SVG standard.
Then, the element is positioned and scaled within (relative to) the <code class="highlighter-rouge">viewBox</code> you specified.
Then, the <code class="highlighter-rouge">viewBox</code> is sized by the viewing software to make the image appear the real world <code class="highlighter-rouge">width</code> and <code class="highlighter-rouge">height</code> you specified, (hopefully) taking into consideration your monitor‚Äôs resolution/dpi.</p>

<p>Because of this pipeline, specifying real world units is prone to error.
You might not produce the actual size you intend.</p>

<p><i class="fas fa-lg fa-check-circle"></i><strong>Bottom line</strong>: Write SVGs without units, except for the <code class="highlighter-rouge">width</code> and <code class="highlighter-rouge">height</code> attributes on the <code class="highlighter-rouge">&lt;svg&gt;</code> element itself.
It is standard practice; and most SVG editing software seems to generate SVGs in this manner by default.
It is also in line with the main purpose of SVGs, which is to create images that are independent of actual size.</p>

<p><a href="https://oreillymedia.github.io/Using_SVG/guide/units.html"><i class="fas fa-lg fa-external-link-alt"></i>SVG Units explained</a></p>

<h4 id="units-example">Units example</h4>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;svg</span>
  <span class="na">viewBox=</span><span class="s">"0 0 96 96"</span>
  <span class="na">width=</span><span class="s">"4in"</span>
  <span class="na">height=</span><span class="s">"4in"</span>
<span class="nt">&gt;</span>
  ...a square with width and height set to "0.5in", centered in the viewbox
<span class="nt">&lt;/svg&gt;</span>
</code></pre></div></div>

<p><i class="fas fa-lg fa-question-circle"></i>Consider the above example.
Assuming the software that views the SVG does a good job, what should the final real world size of the square be?<br />
<i class="fas fa-lg fa-exclamation-circle"></i>Answer: <span class="spoiler">2in x 2in</span></p>

<h4 id="stroke-and-fill">Stroke and fill</h4>

<p>Before getting into drawing basic shapes, it is necessary to understand the <code class="highlighter-rouge">stroke</code> and <code class="highlighter-rouge">fill</code> attributes.
The <code class="highlighter-rouge">stroke</code> is the outline of a shape, and the <code class="highlighter-rouge">fill</code> is the area within a shape.
Both attributes can be set to a color, or to <code class="highlighter-rouge">none</code> to be disabled.</p>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;element</span>
  <span class="na">fill=</span><span class="s">"..."</span>     <span class="na">stroke=</span><span class="s">"..."</span>
  <span class="na">fill=</span><span class="s">"skyblue"</span> <span class="na">stroke=</span><span class="s">"blue"</span>
<span class="nt">&gt;</span>
</code></pre></div></div>

<div class="col">
  <a href="images/2-basics/fill-stroke.svg" target="_blank">
    <img src="images/2-basics/fill-stroke.svg" alt="2-basics/fill-stroke.svg" />
  </a>
</div>

<p>By default, SVG shapes have <code class="highlighter-rouge">fill="black"</code> and <code class="highlighter-rouge">stroke="none"</code>; <em>even shapes that are intended to be just strokes, like lines</em>.
You will likely have to override this frequently.</p>

<p>By default, the <code class="highlighter-rouge">stroke</code> is shown in front of the <code class="highlighter-rouge">fill</code>.
Unfortunately, there is no reliable way to switch this order.</p>

<p><i class="fas fa-lg fa-sticky-note"></i>Special note: You may also come across the value <code class="highlighter-rouge">currentColor</code>.
This makes the <code class="highlighter-rouge">fill</code> or <code class="highlighter-rouge">stroke</code> match the ‚Äúactive‚Äù color in whatever is viewing the SVG.
This is really only relevant in web development, where, for example, you may want an SVG icon to automatically match the color of the text it is inline with.
If there is no ‚Äúcurrent color‚Äù to use, it will default to black.</p>

<h4 id="color">Color</h4>

<p>Color theory is a complex topic that merits its own independent study.
But for the purposes of being able to dive right into creating images, here is a brief explanation.</p>

<p>There are several ways to specify colors in SVG:</p>
<div class="table_container">

  <table>
    <thead>
      <tr>
        <th style="text-align: left">Method</th>
        <th style="text-align: center">Normal (opaque)</th>
        <th style="text-align: center">With transparency</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td style="text-align: left">Named</td>
        <td style="text-align: center"><code class="highlighter-rouge">red</code></td>
        <td style="text-align: center">-</td>
      </tr>
      <tr>
        <td style="text-align: left">Hex</td>
        <td style="text-align: center"><code class="highlighter-rouge">#ff0000</code></td>
        <td style="text-align: center"><code class="highlighter-rouge">#ff0000aa</code></td>
      </tr>
      <tr>
        <td style="text-align: left">Hex shorthand</td>
        <td style="text-align: center"><code class="highlighter-rouge">#f00</code></td>
        <td style="text-align: center"><code class="highlighter-rouge">#f00a</code></td>
      </tr>
      <tr>
        <td style="text-align: left">Red, Green, Blue</td>
        <td style="text-align: center"><code class="highlighter-rouge">rgb(255, 0, 0)</code></td>
        <td style="text-align: center"><code class="highlighter-rouge">rgba(255, 0, 0, 0.66)</code></td>
      </tr>
      <tr>
        <td style="text-align: left">Hue, Saturation, Luminance</td>
        <td style="text-align: center"><code class="highlighter-rouge">hsl(0, 0%, 100%)</code></td>
        <td style="text-align: center"><code class="highlighter-rouge">hsla(0, 0%, 100%, 0.66)</code></td>
      </tr>
    </tbody>
  </table>

</div>

<p><strong>HSL</strong> splits colors into: <strong>hue</strong> ‚Äì <em>what</em> color it is (red vs green vs purple), <strong>saturation</strong> ‚Äì how <em>much</em> color there is (black/white vs colorful), and <strong>luminance</strong> ‚Äì how bright it is (dark vs light).</p>

<p><strong>RGB</strong> splits colors into <strong>red</strong>/<strong>green</strong>/<strong>blue</strong> components, between <code class="highlighter-rouge">0</code> and <code class="highlighter-rouge">255</code> (256 possible values). Balance the components in different proportions to get different hues. Increase/decrease all of the components to increase/decrease the brightness. All <code class="highlighter-rouge">0</code>‚Äôs = black, all <code class="highlighter-rouge">255</code>‚Äôs = white.</p>

<p><strong>Hex</strong> is just a more compact way to write RGB. The 0 to 255 range is compressed down to 2 hex digits, each with 16 possible values (<code class="highlighter-rouge">0</code>, <code class="highlighter-rouge">1</code>, <code class="highlighter-rouge">2</code>, <code class="highlighter-rouge">3</code>, <code class="highlighter-rouge">4</code>, <code class="highlighter-rouge">5</code>, <code class="highlighter-rouge">6</code>, <code class="highlighter-rouge">7</code>, <code class="highlighter-rouge">8</code>, <code class="highlighter-rouge">9</code>, <code class="highlighter-rouge">A</code>, <code class="highlighter-rouge">B</code>, <code class="highlighter-rouge">C</code>, <code class="highlighter-rouge">D</code>, <code class="highlighter-rouge">E</code>, <code class="highlighter-rouge">F</code>). The first two digits represent red, the next two green, and the next two blue.
<em>Hex colors are the most common way to write colors in web technologies.</em></p>

<p><strong>Hex shorthand</strong> is a more compact way to write a <strong>hex</strong> color, where each digit is simply duplicated to create a full <strong>hex</strong> color.</p>

<p><strong>Named</strong> colors are just regular (English) color names, like <code class="highlighter-rouge">red</code> or <code class="highlighter-rouge">violet</code>.</p>

<p>Non-named colors can also accept an additional <strong>alpha</strong> (<code class="highlighter-rouge">a</code>) parameter at the end, which will blend it with whatever content is behind it.</p>

<figure>
  <a href="images/2-basics/colors.svg" target="_blank">
    <img src="images/2-basics/colors.svg" alt="Illustration of hue, saturation, luminance, and alpha" class="" />
  </a>
  <figcaption>Illustration of hue, saturation, luminance, and alpha</figcaption>
</figure>

<p><a href="https://www.materialpalette.com/colors"><i class="fas fa-lg fa-external-link-alt"></i>Material design color palette</a><br />
<a href="https://htmlcolorcodes.com/color-chart/"><i class="fas fa-lg fa-external-link-alt"></i>Another nice color palette</a><br />
<a href="http://colormind.io/"><i class="fas fa-lg fa-external-link-alt"></i>AI-generated color palettes</a><br />
<a href="http://www.gradients.io/"><i class="fas fa-lg fa-external-link-alt"></i>Nice pairs of colors for gradients</a></p>

<h4 id="opacity">Opacity</h4>

<p>An element‚Äôs opacity defines how much it will blend in with whatever content is behind it, on a scale of <code class="highlighter-rouge">0</code> to <code class="highlighter-rouge">1</code>. An opacity of <code class="highlighter-rouge">1</code> will make an element completely opaque; <code class="highlighter-rouge">0</code> completely invisible; <code class="highlighter-rouge">0.5</code> half-way translucent.</p>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;element</span>
  <span class="na">opacity=</span><span class="s">"..."</span>
  <span class="na">opacity=</span><span class="s">"0.5"</span>
<span class="nt">&gt;</span>
</code></pre></div></div>

<div class="col">
  <a href="images/2-basics/opacity.svg" target="_blank">
    <img src="images/2-basics/opacity.svg" alt="2-basics/opacity.svg" />
  </a>
</div>

<p>There are also <code class="highlighter-rouge">fill-opacity</code> and <code class="highlighter-rouge">stroke-opacity</code> attributes to set the transparency of the fill and stroke separately, but they are not broadly supported yet.</p>

<h4 id="z-order">Z-order</h4>

<p>Elements are stacked in the order they appear in your SVG document.
Later defined elements are stacked on-top/in-front of earlier defined elements.</p>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- 1 --&gt;</span>
<span class="nt">&lt;rect</span> <span class="nt">/&gt;</span>
<span class="c">&lt;!-- 2 --&gt;</span>
<span class="nt">&lt;rect</span> <span class="nt">/&gt;</span>
<span class="c">&lt;!-- 3 --&gt;</span>
<span class="nt">&lt;rect</span> <span class="nt">/&gt;</span>
</code></pre></div></div>

<div class="col">
  <a href="images/2-basics/z-order.svg" target="_blank">
    <img src="images/2-basics/z-order.svg" alt="2-basics/z-order.svg" />
  </a>
</div>


      </section>
    
  
    
      <section>
        <h3 id="basic-shapes">Basic Shapes</h3>

<h4 id="rectangle">Rectangle</h4>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;rect</span>
  <span class="na">x=</span><span class="s">"..."</span>
  <span class="na">y=</span><span class="s">"..."</span>
  <span class="na">width=</span><span class="s">"..."</span>
  <span class="na">height=</span><span class="s">"..."</span>
<span class="nt">/&gt;</span>
</code></pre></div></div>

<div class="col">
  <a href="images/3-basic-shapes/rectangle.svg" target="_blank">
    <img src="images/3-basic-shapes/rectangle.svg" alt="3-basic-shapes/rectangle.svg" />
  </a>
</div>

<p>A rectangle is written in the same way as the <code class="highlighter-rouge">viewBox</code> attribute: by specifying the <code class="highlighter-rouge">x</code>/<code class="highlighter-rouge">y</code> coordinate of the upper left corner of the box and the <code class="highlighter-rouge">width</code>/<code class="highlighter-rouge">height</code> of the box.</p>

<h4 id="rounded-rectangle">Rounded rectangle</h4>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;rect</span>
  <span class="na">x=</span><span class="s">"..."</span>
  <span class="na">y=</span><span class="s">"..."</span>
  <span class="na">width=</span><span class="s">"..."</span>
  <span class="na">height=</span><span class="s">"..."</span>
  <span class="na">rx=</span><span class="s">"..."</span>
  <span class="na">ry=</span><span class="s">"..."</span>
<span class="nt">/&gt;</span>
</code></pre></div></div>

<div class="col">
  <a href="images/3-basic-shapes/rounded-rectangle.svg" target="_blank">
    <img src="images/3-basic-shapes/rounded-rectangle.svg" alt="3-basic-shapes/rounded-rectangle.svg" />
  </a>
</div>

<p>A rounded rectangle is written the same way as a regular rectangle, but with the added <code class="highlighter-rouge">rx</code> and <code class="highlighter-rouge">ry</code> attributes that specify the corner radius.
The <code class="highlighter-rouge">width</code> and <code class="highlighter-rouge">height</code> attributes still refer to the full outer width and height of the shape.</p>

<h4 id="circle">Circle</h4>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;circle</span>
  <span class="na">cx=</span><span class="s">"..."</span>
  <span class="na">cy=</span><span class="s">"..."</span>
  <span class="na">r=</span><span class="s">"..."</span>
<span class="nt">/&gt;</span>
</code></pre></div></div>

<div class="col">
  <a href="images/3-basic-shapes/circle.svg" target="_blank">
    <img src="images/3-basic-shapes/circle.svg" alt="3-basic-shapes/circle.svg" />
  </a>
</div>

<p>A circle is written by specifying the <code class="highlighter-rouge">x</code>/<code class="highlighter-rouge">y</code> coordinate of the circle center, and its radius (<code class="highlighter-rouge">r</code>).</p>

<h4 id="ellipse">Ellipse</h4>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;ellipse</span>
  <span class="na">cx=</span><span class="s">"..."</span>
  <span class="na">cy=</span><span class="s">"..."</span>
  <span class="na">ry=</span><span class="s">"..."</span>
  <span class="na">rx=</span><span class="s">"..."</span>
<span class="nt">/&gt;</span>
</code></pre></div></div>

<div class="col">
  <a href="images/3-basic-shapes/ellipse.svg" target="_blank">
    <img src="images/3-basic-shapes/ellipse.svg" alt="3-basic-shapes/ellipse.svg" />
  </a>
</div>

<p>An ellipse is written the same way as a circle, but with separate <code class="highlighter-rouge">rx</code> and <code class="highlighter-rouge">ry</code> attributes for the x-axis and y-axis radii.</p>

<h4 id="line">Line</h4>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;line</span>
  <span class="na">x1=</span><span class="s">"..."</span>
  <span class="na">y1=</span><span class="s">"..."</span>
  <span class="na">x2=</span><span class="s">"..."</span>
  <span class="na">y2=</span><span class="s">"..."</span>
<span class="nt">/&gt;</span>
</code></pre></div></div>

<div class="col">
  <a href="images/3-basic-shapes/line.svg" target="_blank">
    <img src="images/3-basic-shapes/line.svg" alt="3-basic-shapes/line.svg" />
  </a>
</div>

<p>A line is written by specifying start and end <code class="highlighter-rouge">x</code>/<code class="highlighter-rouge">y</code> coordinates.</p>

<h4 id="polygon--polyline">Polygon / polyline</h4>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;polygon</span>
  <span class="na">points=</span><span class="s">"... x y x y ..."</span>
<span class="nt">/&gt;</span>
<span class="nt">&lt;polyline</span>
  <span class="na">points=</span><span class="s">"... x y x y ..."</span>
<span class="nt">/&gt;</span>
</code></pre></div></div>

<div class="col">
  <a href="images/3-basic-shapes/polygon.svg" target="_blank">
    <img src="images/3-basic-shapes/polygon.svg" alt="3-basic-shapes/polygon.svg" />
  </a>
</div>

<p>A <code class="highlighter-rouge">&lt;polygon&gt;</code> element is intended for closed shapes, where the last point is automatically connected to the first.
A <code class="highlighter-rouge">&lt;polyline&gt;</code> element is intended for multi-segment lines (open shapes), and is not automatically closed.</p>

<p>The <code class="highlighter-rouge">points</code> attribute is written as a series of <code class="highlighter-rouge">x</code>/<code class="highlighter-rouge">y</code> coordinates, separated by space or comma.</p>

<p>Note that if <code class="highlighter-rouge">fill</code> is specified for an open shape, it will still be filled and essentially look as if it has been closed, except the last stroke segment will be missing.</p>

<h4 class="break_before" id="--exercise-1"><i class="fas fa-lg fa-flag-checkered"></i>  EXERCISE 1</h4>

<figure>
  <a href="images/exercises/exercise-1.svg" target="_blank">
    <img src="images/exercises/exercise-1.svg" alt="exercises/exercise-1.svg" class="large_img" />
  </a>
  <figcaption></figcaption>
</figure>

<p>Recreate this SVG using the techniques covered so far.
The exact colors, lengths, and dimensions are not important; just try to capture the basic picture.</p>

      </section>
    
  
    
      <section>
        <h3 id="strokes">Strokes</h3>

<h4 id="width">Width</h4>

<p>The <code class="highlighter-rouge">stroke-width</code> attribute specifies the thickness of the stroke around an element.
Note that the stroke is always applied ‚Äúon center‚Äù with the outline of the element.
Half of the stroke width will be applied on one side of the outline, and the other half on the other side.
The outline is exactly where you specify it in the geometry of your shape.</p>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;element</span>
  <span class="na">stroke-width=</span><span class="s">"..."</span>
<span class="nt">/&gt;</span>
</code></pre></div></div>

<div class="col">
  <a href="images/4-strokes/stroke-width.svg" target="_blank">
    <img src="images/4-strokes/stroke-width.svg" alt="4-strokes/stroke-width.svg" />
  </a>
</div>

<p>Unfortunately, there is no reliable way to set the stroke to be on the inside or the outside of the outline.
You will either have to adjust your geometry points to account for the thickness you want, or use a program like Inkscape or Illustrator to help you achieve the desired effect.</p>

<h4 id="line-cap">Line cap</h4>

<p>The <code class="highlighter-rouge">stroke-linecap</code> attribute specifies how the strokes of unclosed shapes look at their ends.</p>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;element</span>
  <span class="na">stroke-linecap=</span><span class="s">"butt"</span>
  <span class="na">stroke-linecap=</span><span class="s">"square"</span>
  <span class="na">stroke-linecap=</span><span class="s">"round"</span>
<span class="nt">/&gt;</span>
</code></pre></div></div>

<div class="col">
  <a href="images/4-strokes/stroke-linecap.svg" target="_blank">
    <img src="images/4-strokes/stroke-linecap.svg" alt="4-strokes/stroke-linecap.svg" />
  </a>
</div>

<p><code class="highlighter-rouge">Butt</code> is the default; it specifies that the stroke ends flush with the end of the outline.
<code class="highlighter-rouge">Square</code> specifies that that stroke extends beyond the end of the outline a distance of half the stroke thickness, creating the appearance of a square centered on the end point.
<code class="highlighter-rouge">Round</code> is the same as <code class="highlighter-rouge">square</code>, except the the stroke is rounded creating the appearance of a circle centered on the end point.</p>

<h4 id="line-join">Line join</h4>

<p>The <code class="highlighter-rouge">stroke-linejoin</code> attribute specifies how consecutive segments of a stroke are joined.</p>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;element</span>
  <span class="na">stroke-linejoin=</span><span class="s">"miter"</span>
  <span class="na">stroke-linejoin=</span><span class="s">"bevel"</span>
  <span class="na">stroke-linejoin=</span><span class="s">"round"</span>
<span class="nt">/&gt;</span>
</code></pre></div></div>

<div class="col">
  <a href="images/4-strokes/stroke-linejoin.svg" target="_blank">
    <img src="images/4-strokes/stroke-linejoin.svg" alt="4-strokes/stroke-linejoin.svg" />
  </a>
</div>

<p><code class="highlighter-rouge">Miter</code> is the default; it extends the edges of the stroke until they intersect, and fills the enclosed area.
<code class="highlighter-rouge">Bevel</code> treats the segments as if they were <code class="highlighter-rouge">butt</code> caps, and fills the resulting gap between them.
<code class="highlighter-rouge">Round</code> treats the segments as if they were <code class="highlighter-rouge">round</code> caps.</p>

<p>The <code class="highlighter-rouge">stroke-miterlimit</code> attribute can be used to make a <code class="highlighter-rouge">miter</code> join by default, but make a <code class="highlighter-rouge">bevel</code> join where the joint angle is too sharp (to avoid a long point jutting out).</p>

<h4 id="dashed-lines">Dashed lines</h4>

<p>The <code class="highlighter-rouge">stroke-dasharray</code> attribute allows you to create custom dash patterns for strokes.
The attribute is specified as a series of alternating dash and gap lengths, starting with the first dash length.</p>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;element</span>
  <span class="na">stroke-dasharray=</span><span class="s">"d g d g ..."</span>

  <span class="na">stroke-dasharray=</span><span class="s">"10"</span>
  <span class="na">stroke-dasharray=</span><span class="s">"20 10"</span>
  <span class="na">stroke-dasharray=</span><span class="s">"20 10 5 10"</span>
<span class="nt">/&gt;</span>
</code></pre></div></div>

<div class="col">
  <a href="images/4-strokes/stroke-dasharray-1.svg" target="_blank">
    <img src="images/4-strokes/stroke-dasharray-1.svg" alt="4-strokes/stroke-dasharray-1.svg" />
  </a>
</div>

<p>If you only provide one value, the dash and gap values will be the same.
In reality, when an odd number of values is provided, the sequence is duplicated once to yield an even number; but this results in unintuitive behavior, and is not recommended for best clarity.</p>

<p><i class="fas fa-lg fa-info-circle"></i>Note: The units of the dash and gap lengths are the same as any other unit in SVG.
They are absolute distances, not percents or any other relative measurement.</p>

<h4 id="dotted-lines">Dotted lines</h4>

<p>By setting <code class="highlighter-rouge">stroke-linecap</code> to <code class="highlighter-rouge">round</code> or <code class="highlighter-rouge">square</code> and using 0-length dashes, you can create dotted lines.</p>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;element</span>
  <span class="na">stroke-dasharray=</span><span class="s">"0 15"</span>
  <span class="na">stroke-dasharray=</span><span class="s">"0 15 10 15"</span>
  <span class="na">stroke-dasharray=</span><span class="s">"0 15 10 15"</span>
<span class="nt">/&gt;</span>
</code></pre></div></div>

<div class="col">
  <a href="images/4-strokes/stroke-dasharray-2.svg" target="_blank">
    <img src="images/4-strokes/stroke-dasharray-2.svg" alt="4-strokes/stroke-dasharray-2.svg" />
  </a>
</div>

<h4 id="dash-offset">Dash offset</h4>

<p>By default, the dash pattern begins at the starting point of the stroke.
The <code class="highlighter-rouge">stroke-dashoffset</code> attribute shifts the dash pattern toward the end point (negative) or toward the start point (positive).</p>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;element</span>
  <span class="na">stroke-dashoffset=</span><span class="s">"0"</span>
  <span class="na">stroke-dashoffset=</span><span class="s">"-5"</span>
  <span class="na">stroke-dashoffset=</span><span class="s">"-10"</span>
<span class="nt">/&gt;</span>
</code></pre></div></div>

<div class="col">
  <a href="images/4-strokes/stroke-dasharray-3.svg" target="_blank">
    <img src="images/4-strokes/stroke-dasharray-3.svg" alt="4-strokes/stroke-dasharray-3.svg" />
  </a>
</div>

<h4 class="break_before" id="--exercise-2"><i class="fas fa-lg fa-flag-checkered"></i>  EXERCISE 2</h4>

<figure>
  <a href="images/exercises/exercise-2.svg" target="_blank">
    <img src="images/exercises/exercise-2.svg" alt="" class="large_img" />
  </a>
  <figcaption></figcaption>
</figure>

<p>Recreate this SVG using the techniques covered so far.
The exact colors, lengths, and dimensions are not important; just try to capture the basic picture.</p>

      </section>
    
  
    
      <section>
        <h3 id="text">Text</h3>

<h4 id="the-text-element">The <code class="highlighter-rouge">&lt;text&gt;</code> element</h4>

<p>Unfortunately, text is one of the most painful things to deal with in SVG.
It will display inconsistently on different platforms and software, especially with regard to alignment.</p>

<p>To guarantee it will always look as expected, convert text to raw shapes using SVG software (eg Inkscape‚Äôs ‚ÄúObject to path‚Äù functionality).
When you do this, it is a good idea to either leave in the original <code class="highlighter-rouge">&lt;text&gt;</code> element commented out, or just make a comment noting the font/size/style you used to generate the text, for posterity.</p>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;text</span>
  <span class="na">x=</span><span class="s">"..."</span>
  <span class="na">y=</span><span class="s">"..."</span>
<span class="nt">&gt;</span>
  Text
<span class="nt">&lt;/text&gt;</span>
</code></pre></div></div>

<div class="col">
  <a href="images/5-text/text.svg" target="_blank">
    <img src="images/5-text/text.svg" alt="5-text/text.svg" />
  </a>
</div>

<p>Text is written by specifying an <code class="highlighter-rouge">x</code>/<code class="highlighter-rouge">y</code> coordinate on a <code class="highlighter-rouge">&lt;text&gt;</code> element, and enclosing the actual text to be displayed within the element.</p>

<h4 id="styling">Styling</h4>

<p>There are many properties available for styling text, but here are the most useful/common ones.</p>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;text</span>
  <span class="na">font-family=</span><span class="s">"Montserrat"</span>
  <span class="na">font-size=</span><span class="s">"16"</span>
  <span class="na">font-weight=</span><span class="s">"bold"</span>
  <span class="na">font-style=</span><span class="s">"italic"</span>
  <span class="na">text-decoration=</span><span class="s">"underline"</span>
  <span class="na">letter-spacing=</span><span class="s">"5"</span>
<span class="nt">&gt;</span>
  SPOOKY
<span class="nt">&lt;/text&gt;</span>
</code></pre></div></div>

<div class="col">
  <a href="images/5-text/text-style.svg" target="_blank">
    <img src="images/5-text/text-style.svg" alt="5-text/text-style.svg" />
  </a>
</div>

<p>The <code class="highlighter-rouge">font-weight</code> attribute can be set to <code class="highlighter-rouge">normal</code> (default), <code class="highlighter-rouge">bold</code>, <code class="highlighter-rouge">bolder</code>, <code class="highlighter-rouge">lighter</code>, or a multiple of 100 between 100 and 1000 (400 is normal, 700 is bold).</p>

<p>If the specified font family isn‚Äôt installed, a system default will be used.</p>

<p><i class="fas fa-lg fa-sticky-note"></i>Special note: It is possible to specify an order of fallback fonts, including a generic type (eg <code class="highlighter-rouge">serif</code>, <code class="highlighter-rouge">sans-serif</code>, <code class="highlighter-rouge">monospace</code>).
You most likely won‚Äôt need to use this, but keep it in mind.</p>

<h4 id="horizontal-alignment">Horizontal alignment</h4>

<p>The <code class="highlighter-rouge">text-anchor</code> attribute determines how the text is aligned horizontally.
The default is <code class="highlighter-rouge">start</code>.</p>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;text</span>
  <span class="na">text-anchor=</span><span class="s">"start"</span>
  <span class="na">text-anchor=</span><span class="s">"middle"</span>
  <span class="na">text-anchor=</span><span class="s">"end"</span>
<span class="nt">&gt;</span>
</code></pre></div></div>

<div class="col">
  <a href="images/5-text/text-anchor.svg" target="_blank">
    <img src="images/5-text/text-anchor.svg" alt="5-text/text-anchor.svg" />
  </a>
</div>

<h4 id="vertical-alignment">Vertical alignment</h4>

<p>The <code class="highlighter-rouge">dominant-baseline</code> attribute determines how the text is aligned vertically.
The default is <code class="highlighter-rouge">baseline</code>.</p>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;text</span>
  <span class="na">dominant-baseline=</span><span class="s">"baseline"</span>
  <span class="na">dominant-baseline=</span><span class="s">"middle"</span>
  <span class="na">dominant-baseline=</span><span class="s">"hanging"</span>
<span class="nt">&gt;</span>
</code></pre></div></div>

<div class="col">
  <a href="images/5-text/text-baseline.svg" target="_blank">
    <img src="images/5-text/text-baseline.svg" alt="5-text/text-baseline.svg" />
  </a>
</div>

<p>Don‚Äôt confuse this with the <code class="highlighter-rouge">alignment-baseline</code> attribute, which is similar but not quite the same.</p>

<h4 id="the-tspan-element">The <code class="highlighter-rouge">&lt;tspan&gt;</code> element</h4>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;text&gt;</span>
  grumpy
  <span class="nt">&lt;tspan</span> <span class="na">fill=</span><span class="s">"#e91e63"</span><span class="nt">&gt;</span>
    cat
  <span class="nt">&lt;/tspan&gt;</span>
<span class="nt">&lt;/text&gt;</span>
</code></pre></div></div>

<div class="col">
  <a href="images/5-text/tspan.svg" target="_blank">
    <img src="images/5-text/tspan.svg" alt="5-text/tspan.svg" />
  </a>
</div>

<p><code class="highlighter-rouge">&lt;tspan&gt;</code> elements can be placed inside <code class="highlighter-rouge">&lt;text&gt;</code> elements to style individual words/strings without breaking the normal flow of text.</p>

<h4 id="tspan-offset"><code class="highlighter-rouge">&lt;tspan&gt;</code> offset</h4>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;text</span>
  <span class="na">baseline-shift=</span><span class="s">"super"</span>
  <span class="na">baseline-shift=</span><span class="s">"sub"</span>

  <span class="na">dx=</span><span class="s">"..."</span>
  <span class="na">dy=</span><span class="s">"..."</span>
<span class="nt">&gt;</span>
</code></pre></div></div>

<div class="col">
  <a href="images/5-text/tspan-offset.svg" target="_blank">
    <img src="images/5-text/tspan-offset.svg" alt="5-text/tspan-offset.svg" />
  </a>
</div>

<p><code class="highlighter-rouge">&lt;tspan&gt;</code> elements can be positioned normally with <code class="highlighter-rouge">x</code> and <code class="highlighter-rouge">y</code>, but can also be positioned relative to the preceding text using the <code class="highlighter-rouge">dx</code> and <code class="highlighter-rouge">dy</code> attributes.
Note that using these attributes offsets all of the following text as well as the element it is applied to.
You can think of it as moving a typing cursor; once you move it, the next text that comes in will start at that position.</p>

<p>The <code class="highlighter-rouge">baseline-shift</code> attribute can be used to quickly create a superscript or subscript without affecting the text after it.</p>

<p><code class="highlighter-rouge">em</code> can be used as a font size unit to specify a size relative to the current font size.
For example, you may want to set <code class="highlighter-rouge">font-size="0.75em"</code> on a superscript element to make it 75% the size of the normal text.</p>

<p>Unfortunately, there is no reliable way to auto-wrap text in SVG.
You will have to manually break text at the desired places and position lines beneath one another.</p>

<h4 id="whitespace">Whitespace</h4>

<p>As mentioned before, SVG (and most of the related web standards) are whitespace-insensitive.
Multiple consecutive whitespace characters are collapsed down to one.
This can unfortunately cause some tricky problems with text, because the way you format your code sometimes matters.</p>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code>grumpy<span class="nt">&lt;tspan&gt;</span>cat<span class="nt">&lt;/tspan&gt;</span>

grumpy
<span class="nt">&lt;tspan&gt;</span>
  cat
<span class="nt">&lt;/tspan&gt;</span>
</code></pre></div></div>

<div class="col">
  <a href="images/5-text/text-whitespace.svg" target="_blank">
    <img src="images/5-text/text-whitespace.svg" alt="5-text/text-whitespace.svg" />
  </a>
</div>

<p>Keep this quirk in mind when writing text in SVG.
If you are having alignment/spacing problems, check your whitespace.</p>

<p>If you explicitly need multiple consecutive whitespace characters in your text, you can force them with Unicode characters (eg <code class="highlighter-rouge">&amp;#160</code> for a single space).</p>

<h4 class="break_before" id="--exercise-3"><i class="fas fa-lg fa-flag-checkered"></i>  EXERCISE 3</h4>

<figure>
  <a href="images/exercises/exercise-3.svg" target="_blank">
    <img src="images/exercises/exercise-3.svg" alt="exercises/exercise-3.svg" class="large_img" />
  </a>
  <figcaption></figcaption>
</figure>

<p>Recreate this SVG using the techniques covered so far.
The exact colors, lengths, and dimensions are not important; just try to capture the basic picture.</p>

      </section>
    
  
    
      <section>
        <h3 id="paths">Paths</h3>

<h4 id="the-path-element">The <code class="highlighter-rouge">&lt;path&gt;</code> element</h4>

<p>A <code class="highlighter-rouge">&lt;path&gt;</code> element can be used to create arbitrary shapes that behave like any of the standard shapes (with regard to <code class="highlighter-rouge">fill</code>, <code class="highlighter-rouge">stroke</code>, <code class="highlighter-rouge">opacity</code>, etc).
The geometry of a path is specified in its <code class="highlighter-rouge">d</code> (data/description/definition) attribute.</p>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;path</span>
  <span class="na">d=</span><span class="s">"..."</span>
  <span class="na">fill=</span><span class="s">"..."</span>
  <span class="na">stroke=</span><span class="s">"..."</span>
<span class="nt">/&gt;</span>
</code></pre></div></div>

<div class="col">
  <a href="images/6-paths/path.svg" target="_blank">
    <img src="images/6-paths/path.svg" alt="6-paths/path.svg" />
  </a>
</div>

<p><a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths"><i class="fas fa-lg fa-external-link-alt"></i>Paths overview</a></p>

<h4 id="the-d-attribute">The <code class="highlighter-rouge">d</code> attribute</h4>

<p>The <code class="highlighter-rouge">d</code> attribute takes a <strong>sequence of draw commands</strong>.
You can think of these commands as moving a paint brush around a canvas.
Commands go <em>from</em> the current point ‚Äì wherever the ‚Äúbrush‚Äù ended up from the previous commands ‚Äì <em>to</em> the specified point.</p>

<p>Each command is a single letter, and can be followed by numerical values to specify where and how to draw the command.</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>M 50 50 L 100 100 C 75 100, 50 75, 50 50

M 50,50 L 100,100 C 75,100 50,75 50,50

M 50 50
L 100 100
C 75 100 50 75 50 50
</code></pre></div></div>

<p>The syntax of these commands is similar to that of the points attribute for polygons and polylines.
Values can be separated by spaces or commas.
Letters next to numerical values do not need to be separated at all, because they can be differentiated by the parser just by their type (whereas ‚Äú10,10‚Äù can‚Äôt be condensed to ‚Äú1010‚Äù without looking like one thousand and ten).
Line breaks are also permitted.</p>

<p>There are many different ways to format path strings.
However, for best clarity, it is recommended to separate commands by line, and separate command values by space.</p>

<h4 id="move-to">Move to</h4>

<p>The <code class="highlighter-rouge">M</code> command moves the brush to the specified point without drawing anything between.</p>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code>M x y
</code></pre></div></div>

<div class="col">
  <a href="images/6-paths/path-m.svg" target="_blank">
    <img src="images/6-paths/path-m.svg" alt="6-paths/path-m.svg" />
  </a>
</div>

<p>You will always start a path by specifying a ‚Äúmove to‚Äù point, so the brush has somewhere to start.</p>

<h4 id="line-to">Line to</h4>

<p>The <code class="highlighter-rouge">L</code> command draws a straight line from the previous point to the specified point.</p>

<p>The <code class="highlighter-rouge">H</code> and <code class="highlighter-rouge">V</code> commands draw horizontal and vertical lines, respectively, from the previous point to the specified x or y coordinate.</p>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code>L x y

H x
V y
</code></pre></div></div>

<div class="col">
  <a href="images/6-paths/path-l.svg" target="_blank">
    <img src="images/6-paths/path-l.svg" alt="6-paths/path-l.svg" />
  </a>
</div>

<h4 id="close">Close</h4>

<p>The <code class="highlighter-rouge">Z</code> command closes the current shape, drawing a line back to the first point.</p>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code>M 25 25
L 45 45
M 55 55
L 75 75
L 45 80
Z
</code></pre></div></div>

<div class="col">
  <a href="images/6-paths/path-z.svg" target="_blank">
    <img src="images/6-paths/path-z.svg" alt="6-paths/path-z.svg" />
  </a>
</div>

<p>Because of the ‚Äúmove to‚Äù command, it is possible to draw multiple shapes in the same path element, called ‚Äúsubpaths‚Äù.
The <code class="highlighter-rouge">Z</code> command closes the current subpath.</p>

<h4 id="arc-to">Arc to</h4>

<p>The <code class="highlighter-rouge">A</code> command draws an elliptical arc from the current point to the specified point.</p>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code>A rx ry angle large cw x y

A 50 50 0 0 1 65 75
</code></pre></div></div>

<div class="col">
  <a href="images/6-paths/path-a-1.svg" target="_blank">
    <img src="images/6-paths/path-a-1.svg" alt="6-paths/path-a-1.svg" />
  </a>
</div>

<p>You might expect that arcs would work by specifying the center point and start/end angles.
Instead, it works from start point to end point, and you choose 1 of 4 possible arcs between them.
This unfortunately means that if the start/end angles you want to draw aren‚Äôt multiples of 90 degrees, you‚Äôll have to do some trigonometry to calculate coordinates, and you‚Äôll end up with a lot of non-whole numbers.</p>

<p>The final <code class="highlighter-rouge">x</code>/<code class="highlighter-rouge">y</code> inputs are the end point coordinate.</p>

<figure>
  <a href="images/6-paths/path-a-2.svg" target="_blank">
    <img src="images/6-paths/path-a-2.svg" alt="Arc angle" class="" />
  </a>
  <figcaption>Arc angle</figcaption>
</figure>

<p>The <code class="highlighter-rouge">rx</code> and <code class="highlighter-rouge">ry</code> inputs specify the x and y radii of the ellipse that forms the arc.</p>

<p>The angle input determines the <em>direction the <code class="highlighter-rouge">rx</code> and <code class="highlighter-rouge">ry</code> radii</em>.
<strong>It does not change the start/end points of the arc</strong>.
The angle specifies the clockwise degrees between the <code class="highlighter-rouge">viewBox</code> positive x axis and the positive x axis of the ellipse.</p>

<p>If <code class="highlighter-rouge">rx</code> and <code class="highlighter-rouge">ry</code> are the same, the angle will have no visible effect, because a perfect circle looks the same when rotated.</p>

<figure>
  <a href="images/6-paths/path-a-3.svg" target="_blank">
    <img src="images/6-paths/path-a-3.svg" alt="Arc flags" class="" />
  </a>
  <figcaption>Arc flags</figcaption>
</figure>

<p>Given a certain radius, there are 4 possible arcs that can be drawn between two points.
The <code class="highlighter-rouge">large</code> and <code class="highlighter-rouge">cw</code> (often called the ‚Äúlarge arc‚Äù and ‚Äúsweep‚Äù flags) inputs allow you to specify which of the 4 possible arcs should be used.
These inputs should be set to <code class="highlighter-rouge">0</code> (for false) or <code class="highlighter-rouge">1</code> (for true).</p>

<p>When <code class="highlighter-rouge">large</code> is set to <code class="highlighter-rouge">1</code>, the outer/larger arc is used (shown as dotted lines above).
When <code class="highlighter-rouge">large</code> is set to <code class="highlighter-rouge">0</code>, the inner/smaller arc is used (shown as solid lines above).</p>

<p>When <code class="highlighter-rouge">cw</code> is set to <code class="highlighter-rouge">1</code>, the clockwise arc is used (shown as blue above).
When <code class="highlighter-rouge">cw</code> is set to <code class="highlighter-rouge">0</code>, the counter-clockwise arc used (shown as red above).
Imagine driving a car on the arc from the start point to the end point.
If you have turn right the whole time, the <code class="highlighter-rouge">cw</code> flag is <code class="highlighter-rouge">1</code>.
If you have to turn left the whole time, the <code class="highlighter-rouge">cw</code> flag is <code class="highlighter-rouge">0</code>.</p>

<p>If the radii you‚Äôve specified aren‚Äôt large enough to create an arc to the specified point, they are increased (maintaining proportions) until they are.</p>

<p><a href="https://codepen.io/lingtalfi/pen/yaLWJG"><i class="fas fa-lg fa-external-link-alt"></i>Interactive demonstration of the arc command</a></p>

<h4 id="curve-to">Curve to</h4>

<p>The <code class="highlighter-rouge">C</code> command draws a curve with two control (handle) points from the current point to the specified point.
If you‚Äôve ever tried to draw a curve in a program like Inkscape or Illustrator, you are probably familiar with the ‚Äúhandles‚Äù on each point.
The best way to understand how control points behave and form curves is to just play around with them in one of those programs.</p>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code>C a b c d x y
</code></pre></div></div>

<div class="col">
  <a href="images/6-paths/path-c.svg" target="_blank">
    <img src="images/6-paths/path-c.svg" alt="6-paths/path-c.svg" />
  </a>
</div>

<p><i class="fas fa-lg fa-info-circle"></i>Tip: To connect two curved segments smoothly without any visible joint, make sure that their connecting handle lines are the same slope.</p>

<p><a href="https://en.wikipedia.org/wiki/B%C3%A9zier_curve#Constructing_B%C3%A9zier_curves"><i class="fas fa-lg fa-external-link-alt"></i>Wikipedia article on Bezier Curves</a><br />
<a href="https://www.joshwcomeau.com/posts/dynamic-bezier-curves/"><i class="fas fa-lg fa-external-link-alt"></i>Interactive demonstration of Bezier curves</a></p>

<h4 id="curve-to-shorthand">Curve to shorthand</h4>

<p>The <code class="highlighter-rouge">S</code> command is a quicker way to draw a series of bezier curves in succession.
The command essentially does the same thing as the <code class="highlighter-rouge">C</code> command, except that the <code class="highlighter-rouge">a b</code> control point is assumed to be a reflection of the <code class="highlighter-rouge">c d</code> control point of the previous curve.</p>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code>S c d x y
</code></pre></div></div>

<div class="col">
  <a href="images/6-paths/path-s.svg" target="_blank">
    <img src="images/6-paths/path-s.svg" alt="6-paths/path-s.svg" />
  </a>
</div>

<p>This command should only be used right after a <code class="highlighter-rouge">Q</code> command or another <code class="highlighter-rouge">S</code> command; otherwise there is no previous control point to assume from.</p>

<p>This is how the curve/pen tool in programs like Inkscape and Illustrator typically works, where you click and drag to simultaneously define the first control point of the next curve and the second control point of the previous curve.</p>

<h4 id="quadratic-to">Quadratic to</h4>

<p>The <code class="highlighter-rouge">Q</code> command draws a curve with one control (handle) point from the current point to the specified point.
You can think of it as a simplified version of the <code class="highlighter-rouge">C</code> command, where both control points are the same.</p>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Q i j x y
</code></pre></div></div>

<div class="col">
  <a href="images/6-paths/path-q.svg" target="_blank">
    <img src="images/6-paths/path-q.svg" alt="6-paths/path-q.svg" />
  </a>
</div>

<h4 id="quadratic-to-shorthand">Quadratic to shorthand</h4>

<p>The <code class="highlighter-rouge">T</code> command is a quicker way to draw a series of quadratic curves in succession.
The command essentially does the same thing as the <code class="highlighter-rouge">Q</code> command, except that the <code class="highlighter-rouge">i j</code> control point is assumed to be a reflection of the <code class="highlighter-rouge">i j</code> control point of the previous curve.</p>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code>T x y
</code></pre></div></div>

<div class="col">
  <a href="images/6-paths/path-t.svg" target="_blank">
    <img src="images/6-paths/path-t.svg" alt="6-paths/path-t.svg" />
  </a>
</div>

<p>This command should only be used right after a <code class="highlighter-rouge">Q</code> command or another <code class="highlighter-rouge">T</code> command; otherwise there is no previous control point to assume from.</p>

<h4 id="relative-coordinates">Relative coordinates</h4>

<p>Note that all of the previous commands were shown as <strong>capital letters</strong>.
If you provide a lowercase command letter, coordinates you give it are assumed to be relative to the previous coordinate, instead of relative to the origin of the image (absolute).</p>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code>M 25 25
h 50
v 30
l -25 25
l -25 -25
z
</code></pre></div></div>

<div class="col">
  <a href="images/6-paths/relative-coordinates.svg" target="_blank">
    <img src="images/6-paths/relative-coordinates.svg" alt="6-paths/relative-coordinates.svg" />
  </a>
</div>

<p>This can be very useful when you know the difference between each point better than their absolute positions in the overall image.
However, if you will want to tweak individual points without affecting all the following points, you should write your coordinates as absolute.</p>

<h4 id="quirks">Quirks</h4>

<p>If you provide more inputs than are needed for a command, the extra inputs overflow into a new command of the same type.
For example, if you write a ‚Äúline to‚Äù command, and keep providing pairs of coordinates without a new command letter, it will simply be parsed as multiple consecutive line commands.</p>

<p>If you are trying to draw a circle in a path element, you unfortunately cannot draw it with only one arc command; you must split it up into multiple.
It‚Äôs usually the clearest and simplest to just draw two semi-circles.</p>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code>M 10 10
l 35 0
0 35
-35 0
z

M 70 50
a 20 20 0 0 1 0 40
a 20 20 0 0 1 0 -40
z
</code></pre></div></div>

<div class="col">
  <a href="images/6-paths/quirks.svg" target="_blank">
    <img src="images/6-paths/quirks.svg" alt="6-paths/quirks.svg" />
  </a>
</div>

<h4 class="break_before" id="--exercise-4"><i class="fas fa-lg fa-flag-checkered"></i>  EXERCISE 4</h4>

<figure>
  <a href="images/exercises/exercise-4.svg" target="_blank">
    <img src="images/exercises/exercise-4.svg" alt="exercises/exercise-4.svg" class="large_img" />
  </a>
  <figcaption></figcaption>
</figure>

<p>Recreate this SVG using the techniques covered so far.
The exact colors, lengths, and dimensions are not important; just try to capture the basic picture.</p>

      </section>
    
  
    
      <section>
        <h3 id="groups-and-transforms">Groups and Transforms</h3>

<h4 id="the-g-element">The <code class="highlighter-rouge">&lt;g&gt;</code> element</h4>

<p>Elements can be grouped together and then treated and operated on as a whole, just like in any software that has grouping.
Placing elements inside a <code class="highlighter-rouge">&lt;g&gt;</code> element groups them together.
Groups can be nested within each other, allowing for a complex hierarchy of visual components.</p>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;g</span> <span class="na">fill=</span><span class="s">"skyblue"</span> <span class="na">stroke=</span><span class="s">"blue"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;rect</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;polygon</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;circle</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/g&gt;</span>
</code></pre></div></div>

<div class="col">
  <a href="images/7-groups-transforms/group.svg" target="_blank">
    <img src="images/7-groups-transforms/group.svg" alt="7-groups-transforms/group.svg" />
  </a>
</div>

<p>Style attributes like <code class="highlighter-rouge">fill</code> and <code class="highlighter-rouge">stroke</code> can be set once, on the group element, and will automatically cascade down to all of the children elements.
Transformations can be applied to a group to affect all of the children as if they were a single cohesive element.</p>

<p>SVG editing software usually uses groups as a way to make layers that can be conveniently toggled on/off.
Groups may also be used to just divide the document into more readable/manageable sections.</p>

<h4 id="group-opacity">Group opacity</h4>

<p>When the <code class="highlighter-rouge">opacity</code> attribute is applied to a group, all of its children are drawn as normal before the opacity is applied.
If you draw several overlapping shapes with solid fills and put them in a group with an opacity, they will become translucent together as a single shape, rather than being individually translucent.</p>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;rect</span> <span class="na">opacity=</span><span class="s">"0.5"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;circle</span> <span class="na">opacity=</span><span class="s">"0.5"</span> <span class="nt">/&gt;</span>

<span class="nt">&lt;g</span> <span class="na">opacity=</span><span class="s">"0.5"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;rect</span> <span class="nt">/&gt;&lt;circle</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/g&gt;</span>
</code></pre></div></div>

<div class="col">
  <a href="images/7-groups-transforms/group-opacity.svg" target="_blank">
    <img src="images/7-groups-transforms/group-opacity.svg" alt="7-groups-transforms/group-opacity.svg" />
  </a>
</div>

<p>This is a useful trick when the shape you need is more easily drawn with basic shapes than with a multi-part <code class="highlighter-rouge">&lt;path&gt;</code> element, and you need it to be transparent.</p>

<h4 id="the-transform-attribute">The <code class="highlighter-rouge">transform</code> attribute</h4>

<p>The <code class="highlighter-rouge">transform</code> attribute can be applied to an element to translate, scale, rotate, or skew it.
The transformations are applied near the end of the rendering process, meaning that they will transform the element ‚Äúas is‚Äù.
That is, all strokes, fill patterns, child shapes, etc will be warped.</p>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;element</span>
  <span class="na">transform=</span><span class="s">"last() middle() first()"</span>
<span class="nt">/&gt;</span>
</code></pre></div></div>

<div class="col">
  <a href="images/7-groups-transforms/transform.svg" target="_blank">
    <img src="images/7-groups-transforms/transform.svg" alt="7-groups-transforms/transform.svg" />
  </a>
</div>

<p>The attribute takes a series of functions that are <strong>applied right to left</strong>, separated by space.
Multiple functions of the same type can be specified, and in any order.
Arguments can be separated by space or comma.</p>

<h4 id="translate">Translate</h4>

<p>The <code class="highlighter-rouge">translate</code> function takes <code class="highlighter-rouge">dx</code> and <code class="highlighter-rouge">dy</code> distances (specified the same way as any other unit) to move the object by in the x and y axes.</p>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code>translate(dx,dy)
</code></pre></div></div>

<div class="col">
  <a href="images/7-groups-transforms/transform-translate.svg" target="_blank">
    <img src="images/7-groups-transforms/transform-translate.svg" alt="7-groups-transforms/transform-translate.svg" />
  </a>
</div>

<h4 id="scale">Scale</h4>

<p>The <code class="highlighter-rouge">scale</code> function takes <code class="highlighter-rouge">sx</code> and <code class="highlighter-rouge">sy</code> factors to scale the object by in the x and y axes.
<code class="highlighter-rouge">1</code> is original size, <code class="highlighter-rouge">0.5</code> is half size, <code class="highlighter-rouge">2</code> is double size, etc.</p>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code>scale(sx,sy)
</code></pre></div></div>

<div class="col">
  <a href="images/7-groups-transforms/transform-scale.svg" target="_blank">
    <img src="images/7-groups-transforms/transform-scale.svg" alt="7-groups-transforms/transform-scale.svg" />
  </a>
</div>

<p>If <code class="highlighter-rouge">sy</code> is not provided, it is assumed to be the same as the provided <code class="highlighter-rouge">sx</code>; ie, an aspect-ratio-preserving scale.</p>

<h4 id="rotate">Rotate</h4>

<p>The <code class="highlighter-rouge">rotate</code> function takes an <code class="highlighter-rouge">angle</code> to rotate the object by (clockwise, from the positive x axis).</p>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rotate(angle,x,y)
</code></pre></div></div>

<div class="col">
  <a href="images/7-groups-transforms/transform-rotate.svg" target="_blank">
    <img src="images/7-groups-transforms/transform-rotate.svg" alt="7-groups-transforms/transform-rotate.svg" />
  </a>
</div>

<p>The function also takes an optional <code class="highlighter-rouge">x</code> and <code class="highlighter-rouge">y</code> rotation pivot point, which is assumed to be the origin if not provided.</p>

<h4 id="skew">Skew</h4>

<p>The <code class="highlighter-rouge">skewX</code> and <code class="highlighter-rouge">skewY</code> functions take an <code class="highlighter-rouge">angle</code> to horizontally and vertically (respectively) skew the object by.
Skewing can be thought of as slicing the object (horizontally with skewX or vertically with skewY) and splaying those slices out like a deck of cards.</p>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code>skewX(angle)
skewY(angle)
</code></pre></div></div>

<div class="col">
  <a href="images/7-groups-transforms/transform-skew.svg" target="_blank">
    <img src="images/7-groups-transforms/transform-skew.svg" alt="7-groups-transforms/transform-skew.svg" />
  </a>
</div>

<p>The <code class="highlighter-rouge">x</code> skew can also be visualized as rotating the vertical axis (counter-clockwise) by an angle, and the <code class="highlighter-rouge">y</code> skew as rotating the horizontal axis (clockwise).</p>

<h4 id="transform-origin">Transform origin</h4>

<p>By default, transform operations are done <strong>relative to the origin of the SVG</strong>.
If you wish to transform an element around its center, you unfortunately must go through a tedious process: first translate the object such that its center is at <code class="highlighter-rouge">0,0</code>, apply your rotation/scale/skew, then translate it back to its original position.</p>

<p>There is a <code class="highlighter-rouge">transform-origin</code> attribute that can change which absolute point the element is transformed around, but unfortunately it is not reliable.
Also, it only allows you to set the transform origin relative to the <code class="highlighter-rouge">viewBox</code> (eg, center of the view), not around the center of a particular element.</p>

<figure>
  <a href="images/7-groups-transforms/transform-origin.svg" target="_blank">
    <img src="images/7-groups-transforms/transform-origin.svg" alt="A shape drawn around the origin" class="" />
  </a>
  <figcaption>A shape drawn around the origin</figcaption>
</figure>

<p>As such, sometimes it is a good idea to simply draw shapes around the origin from the start, then translate them to the desired location.
This has the added benefit of making the coordinates more symmetric, easier to read, and quicker to change later.</p>

<h4 class="break_before" id="--exercise-5"><i class="fas fa-lg fa-flag-checkered"></i>  EXERCISE 5</h4>

<figure>
  <a href="images/exercises/exercise-5.svg" target="_blank">
    <img src="images/exercises/exercise-5.svg" alt="exercises/exercise-5.svg" class="large_img" />
  </a>
  <figcaption></figcaption>
</figure>

<p>Recreate this SVG using the techniques covered so far.
The exact colors, lengths, and dimensions are not important; just try to capture the basic picture.</p>

      </section>
    
  
    
      <section>
        <h3 id="special-concepts">Special Concepts</h3>

<h4 id="classes-and-ids">Classes and id‚Äôs</h4>

<p>The <code class="highlighter-rouge">id</code> and <code class="highlighter-rouge">class</code> attributes can be used to name/label elements so you can refer to them elsewhere in the document.
There is a wide range of valid syntaxes for these names, but it is convention to only use letters, numbers, underscores, or dashes.
Notably, the names cannot start with a number.</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;element</span> <span class="na">id=</span><span class="s">"unique_thing"</span> <span class="nt">/&gt;</span>

<span class="nt">&lt;element</span> <span class="na">class=</span><span class="s">"generic_type"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;element</span> <span class="na">class=</span><span class="s">"generic_type"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;element</span> <span class="na">class=</span><span class="s">"generic_type another_type"</span> <span class="nt">/&gt;</span>
</code></pre></div></div>

<p>An <code class="highlighter-rouge">id</code> is meant to reference a specific instance of an object; an object that is unique, and only appears once in the document.</p>

<p>A <code class="highlighter-rouge">class</code> is meant to reference a type of object that there are multiple instances of throughout the document.
You can also apply several classes to a single object by separating the class names by space.</p>

<p>You will see SVG editing software output a lot of generated ids and classes.
They normally not very descriptive or useful, and can often be removed.</p>

<h4 id="css-and-the-style-element">CSS and the <code class="highlighter-rouge">&lt;style&gt;</code> element</h4>

<p>Recall that SVG is defined by the same people who define web standards like <a href="https://en.wikipedia.org/wiki/HTML">HTML</a> and <a href="https://en.wikipedia.org/wiki/Cascading_Style_Sheets">CSS</a>.
As such, there is a lot of crossover and overlap between the standards, making it very confusing for people trying to learn them.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;style&gt;</span>
  <span class="nt">element</span> <span class="p">{</span>
    <span class="py">attribute</span><span class="p">:</span> <span class="n">value</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nf">#id_name</span> <span class="p">{</span>
  <span class="p">}</span>
  <span class="nc">.class_name</span> <span class="p">{</span>
  <span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
</code></pre></div></div>

<p>Adding a <code class="highlighter-rouge">&lt;style&gt;</code> element to an SVG allows you to apply CSS styles to certain elements in the image.
A CSS style, for the purposes of SVG, is an alternative way to set an attribute.
Many of the attributes that have been covered in this tutorial so far can also be applied as a CSS style, with a slightly different syntax, as illustrated above.
The benefit of this approach is that you can apply properties to multiple elements in just one spot.</p>

<p>The special characters that precede the names are known as ‚Äú<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors">CSS selectors</a>‚Äù.
There are many more advanced selectors, but you will likely only ever use the id <code class="highlighter-rouge">#</code> and class <code class="highlighter-rouge">.</code> selectors.
Without a preceding character, you are referring to the type of element itself; ie the ‚Äúelement name‚Äù.
For example, <code class="highlighter-rouge">text { fill: red }</code> would apply a red fill to all <code class="highlighter-rouge">&lt;text&gt;</code> elements in the document, whether they have ids/classes or not.</p>

<p>Note that the <code class="highlighter-rouge">&lt;style&gt;</code> element itself is not visible; it is a definition element.
There are several other types of definition elements like this as well.</p>

<h4 id="valid-style-attributes-and-exceptions">Valid <code class="highlighter-rouge">&lt;style&gt;</code> attributes, and exceptions</h4>

<p>The attributes that can be applied with CSS styles are referred to as ‚Äú<a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/Presentation">presentation attributes</a>‚Äù.
In general, they are the properties that describe the ‚Äústyle‚Äù of elements, but not their geometry.
The attributes covered in this tutorial that can be applied with styles are:</p>

<p><code class="highlighter-rouge">fill</code> <code class="highlighter-rouge">stroke</code> <code class="highlighter-rouge">opacity</code> <code class="highlighter-rouge">stroke-width</code> <code class="highlighter-rouge">stroke-linecap</code> <code class="highlighter-rouge">stroke-linejoin</code> <code class="highlighter-rouge">stroke-dasharray</code> <code class="highlighter-rouge">stroke-dashoffset</code> <code class="highlighter-rouge">font-family</code> <code class="highlighter-rouge">font-size</code> <code class="highlighter-rouge">font-weight</code> <code class="highlighter-rouge">font-style</code> <code class="highlighter-rouge">text-decoration</code> <code class="highlighter-rouge">letter-spacing</code> <code class="highlighter-rouge">text-anchor</code> <code class="highlighter-rouge">dominant-baseline</code> <code class="highlighter-rouge">baseline-shift</code> <code class="highlighter-rouge">transform</code></p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;style&gt;</span>
  <span class="nf">#some_element</span> <span class="p">{</span>
    <span class="py">fill</span><span class="p">:</span> <span class="no">red</span><span class="p">;</span>
    <span class="py">stroke</span><span class="p">:</span> <span class="no">blue</span><span class="p">;</span>
    <span class="py">stroke-width</span><span class="p">:</span> <span class="m">10</span><span class="p">;</span>

    <span class="err">...</span>

    <span class="nl">transform</span><span class="p">:</span> <span class="n">translate</span><span class="p">(</span><span class="m">10px</span><span class="p">,</span><span class="m">5px</span><span class="p">)</span> <span class="n">rotate</span><span class="p">(</span><span class="m">45deg</span><span class="p">)</span> <span class="n">skewX</span><span class="p">(</span><span class="m">10deg</span><span class="p">);</span>
    <span class="nl">font-size</span><span class="p">:</span> <span class="m">12pt</span><span class="p">;</span>
    <span class="nl">letter-spacing</span><span class="p">:</span> <span class="m">2px</span><span class="p">;</span>
  <span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
</code></pre></div></div>

<p>Note some small differences: the transform attribute requires specifying units, and requires a comma between function parameters (a space is not valid).
The font-size and letter-spacing attributes also require units.
In general, if something is not working, check to see if the CSS version of the attribute requires a different syntax than the SVG version.</p>

<p>CSS also has significantly more transform functions than SVG, like <code class="highlighter-rouge">perspective</code> and <code class="highlighter-rouge">rotate3d</code>.
But use these in SVG with extreme caution; they are not likely to be supported in many programs.</p>

<h4 id="inline-styles">Inline styles</h4>

<p>To add more confusion, CSS styles can also be defined ‚Äúinline‚Äù, right on the element, in a <code class="highlighter-rouge">style</code> attribute.
This makes 3 ways you can specify the appearance of objects:</p>

<ol>
  <li>Attributes on the object</li>
  <li>CSS styles in <code class="highlighter-rouge">&lt;style&gt;</code> element</li>
  <li>Inline CSS styles</li>
</ol>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;element</span> <span class="na">attribute=</span><span class="s">"value"</span> <span class="nt">/&gt;</span>

<span class="nt">&lt;style&gt;</span>
  <span class="nf">#some_element</span> <span class="p">{</span>
    <span class="py">attribute</span><span class="p">:</span> <span class="n">value</span><span class="p">;</span>
  <span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>

<span class="nt">&lt;element</span> <span class="na">style=</span><span class="s">"attribute: value; attribute: value; attribute: value"</span> <span class="nt">/&gt;</span>
</code></pre></div></div>

<p>For most purposes, these will all yield the same result.
The main difference is that they have different priorities when there are overlapping/conflicting properties for a particular element.</p>

<p>There is no consensus about which of these to use and when.
SVG editing software will often prefer inline CSS styles, perhaps because they have the highest/final priority.</p>

<h4 id="style-example"><code class="highlighter-rouge">&lt;style&gt;</code> example</h4>

<p>Here is an example of using a combination of CSS selectors: element name, id name, and class name.</p>

<div class="language-html col highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;style&gt;</span>
  <span class="nt">text</span> <span class="p">{</span> <span class="nl">font-family</span><span class="p">:</span> <span class="n">Pacifico</span><span class="p">;</span> <span class="p">}</span>
  <span class="nf">#company</span> <span class="p">{</span> <span class="nl">font-size</span><span class="p">:</span> <span class="m">20pt</span><span class="p">;</span> <span class="p">}</span>
  <span class="nc">.blue</span> <span class="p">{</span> <span class="py">fill</span><span class="p">:</span> <span class="no">blue</span><span class="p">;</span> <span class="p">}</span>
  <span class="nc">.dot</span> <span class="p">{</span> <span class="nl">opacity</span><span class="p">:</span> <span class="m">0.5</span><span class="p">;</span> <span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>

<span class="nt">&lt;text</span> <span class="na">id=</span><span class="s">"company"</span> <span class="na">class=</span><span class="s">"blue"</span><span class="nt">&gt;</span>
  Twiddr
<span class="nt">&lt;/text&gt;</span>
<span class="nt">&lt;circle</span> <span class="na">class=</span><span class="s">"blue dot"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;circle</span> <span class="na">class=</span><span class="s">"blue dot"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;circle</span> <span class="na">class=</span><span class="s">"blue dot"</span> <span class="nt">/&gt;</span>
</code></pre></div></div>

<div class="col">
  <a href="images/8-special-concepts/style.svg" target="_blank">
    <img src="images/8-special-concepts/style.svg" alt="8-special-concepts/style.svg" />
  </a>
</div>

<p><i class="fas fa-lg fa-sticky-note"></i>Special note: If you want to use an online font but don‚Äôt want to install it on your system, you can dynamically import the font from a url like this:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;style&gt;</span>
  <span class="k">@import</span> <span class="sx">url('https://fonts.googleapis.com/css?family=Pacifico')</span><span class="p">;</span>

  <span class="nf">#some_element</span> <span class="p">{</span>
    <span class="nl">font-family</span><span class="p">:</span> <span class="n">Pacifico</span>
  <span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
</code></pre></div></div>

<h4 id="gradients">Gradients</h4>

<p>The <code class="highlighter-rouge">&lt;defs&gt;</code> element, like the <code class="highlighter-rouge">&lt;style&gt;</code> element, is used to define special things that aren‚Äôt shown in the image but can be referenced elsewhere in the document.
Gradients are one such thing.</p>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;defs&gt;</span>
  <span class="nt">&lt;linearGradient</span>
    <span class="na">id=</span><span class="s">"rainbow"</span>
    <span class="na">x1=</span><span class="s">"0%"</span>
    <span class="na">y1=</span><span class="s">"100%"</span>
    <span class="na">x2=</span><span class="s">"100%"</span>
    <span class="na">y2=</span><span class="s">"0%"</span>
  <span class="nt">&gt;</span>
    <span class="nt">&lt;stop</span>
      <span class="na">offset=</span><span class="s">"0%"</span>
      <span class="na">stop-color=</span><span class="s">"red"</span>
    <span class="nt">/&gt;</span>
    ...
    <span class="nt">&lt;stop</span>
      <span class="na">offset=</span><span class="s">"50%"</span>
      <span class="na">stop-color=</span><span class="s">"blue"</span>
    <span class="nt">/&gt;</span>
    ...
    <span class="nt">&lt;stop</span>
      <span class="na">offset=</span><span class="s">"100%"</span>
      <span class="na">stop-color=</span><span class="s">"orange"</span>
    <span class="nt">/&gt;</span>
  <span class="nt">&lt;/linearGradient&gt;</span>
<span class="nt">&lt;/defs&gt;</span>

<span class="nt">&lt;rect</span> <span class="na">fill=</span><span class="s">"url('#rainbow')"</span> <span class="nt">/&gt;</span>
</code></pre></div></div>

<div class="col">
  <a href="images/8-special-concepts/gradient.svg" target="_blank">
    <img src="images/8-special-concepts/gradient.svg" alt="8-special-concepts/gradient.svg" />
  </a>
</div>

<p>Gradients can be used as <code class="highlighter-rouge">fill</code>‚Äôs or <code class="highlighter-rouge">stroke</code>‚Äôs instead of a solid color.
There are two kinds of gradients you can specify: <code class="highlighter-rouge">&lt;linearGradient&gt;</code> and <code class="highlighter-rouge">&lt;radialGradient&gt;</code> (unfortunately there is no angular gradient).
You can specify the start (<code class="highlighter-rouge">x1</code>/<code class="highlighter-rouge">y1</code>) and stop (<code class="highlighter-rouge">x2</code>/<code class="highlighter-rouge">y2</code>) position of the gradient in terms of % (relative to the dimensions of whatever object it is applied to).
You can add any color ‚Äústops‚Äù that you need, specifying their % through the gradient (<code class="highlighter-rouge">offset</code>), their color (<code class="highlighter-rouge">stop-color</code>), and their opacity (<code class="highlighter-rouge">stop-opacity</code>) if needed.
There are several other parameters available to tweak the appearance, but these are the most commonly needed.</p>

<p>To apply a gradient to an object, first give the gradient an <code class="highlighter-rouge">id</code>, then set the <code class="highlighter-rouge">fill</code> or <code class="highlighter-rouge">stroke</code> of your object to <code class="highlighter-rouge">url('#the_id')</code>.</p>

<h4 id="markers">Markers</h4>

<p>Markers are another thing that go in the <code class="highlighter-rouge">&lt;defs&gt;</code> element.</p>

<p>Markers are a way to define arrow heads or point markers on the <code class="highlighter-rouge">stroke</code> of <code class="highlighter-rouge">&lt;line&gt;</code>‚Äôs, <code class="highlighter-rouge">&lt;polygons&gt;</code>‚Äôs, <code class="highlighter-rouge">&lt;polyline&gt;</code>‚Äôs, or <code class="highlighter-rouge">&lt;path&gt;</code>‚Äôs.
They can be any shape you want, and can be placed at the start of a stroke, the end of a stroke, and at the mid-points (where separate segments join) of a stroke: <code class="highlighter-rouge">marker-start</code>, <code class="highlighter-rouge">marker-end</code>, and <code class="highlighter-rouge">marker-mid</code>, respectively.</p>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;defs&gt;</span>
  <span class="nt">&lt;marker</span>
    <span class="na">id=</span><span class="s">"arrow"</span>
    <span class="na">orient=</span><span class="s">"auto-start-reverse"</span>
  <span class="nt">&gt;</span>
    ...
  <span class="nt">&lt;/marker&gt;</span>
  <span class="nt">&lt;marker</span> <span class="na">id=</span><span class="s">"dot"</span> <span class="na">orient=</span><span class="s">"auto"</span><span class="nt">&gt;</span>
    ...
  <span class="nt">&lt;/marker&gt;</span>
<span class="nt">&lt;/defs&gt;</span>

<span class="nt">&lt;path</span>
  <span class="na">marker-start=</span><span class="s">"url('#arrow')"</span>
  <span class="na">marker-mid=</span><span class="s">"url('#dot')"</span>
  <span class="na">marker-end=</span><span class="s">"url('#arrow')"</span>
<span class="nt">/&gt;</span>
</code></pre></div></div>

<div class="col">
  <a href="images/8-special-concepts/marker-1.svg" target="_blank">
    <img src="images/8-special-concepts/marker-1.svg" alt="8-special-concepts/marker-1.svg" />
  </a>
</div>

<p>The way markers are defined are essentially as their own mini-SVG within the main SVG.
You specify a <code class="highlighter-rouge">viewBox</code> attribute for the marker shape, as well as a <code class="highlighter-rouge">width</code> and <code class="highlighter-rouge">height</code>.
The <code class="highlighter-rouge">viewBox</code> determines the visible area and coordinate space, and the <code class="highlighter-rouge">width</code>/<code class="highlighter-rouge">height</code> determine the resulting size that the area is scaled to.</p>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;defs&gt;</span>
  <span class="nt">&lt;marker</span>
    <span class="na">id=</span><span class="s">"arrowhead"</span>
    <span class="na">viewBox=</span><span class="s">"0 0 10 8"</span>
    <span class="na">refX=</span><span class="s">"5"</span>
    <span class="na">refY=</span><span class="s">"4"</span>
    <span class="na">markerWidth=</span><span class="s">"5"</span>
    <span class="na">markerHeight=</span><span class="s">"4"</span>
    <span class="na">orient=</span><span class="s">"auto-start-reverse"</span>
  <span class="nt">&gt;</span>
    <span class="nt">&lt;polygon</span> <span class="na">points=</span><span class="s">"... shape ..."</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/marker&gt;</span>
<span class="nt">&lt;/defs&gt;</span>
</code></pre></div></div>

<div class="col">
  <a href="images/8-special-concepts/marker-2.svg" target="_blank">
    <img src="images/8-special-concepts/marker-2.svg" alt="8-special-concepts/marker-2.svg" />
  </a>
</div>

<p>One difference, though, is that <code class="highlighter-rouge">markerWidth</code> and <code class="highlighter-rouge">markerHeight</code>, by default, are multiplied by the <code class="highlighter-rouge">stroke-width</code> of the stroke that the marker is attached to.
For example, if they are set to <code class="highlighter-rouge">5</code>, and the stroke using the marker has a thickness of <code class="highlighter-rouge">3</code>, the resulting size (in SVG units) of the marker will be <code class="highlighter-rouge">15</code>x<code class="highlighter-rouge">15</code>.
You can make a marker an absolute/constant size by changing the <code class="highlighter-rouge">markerUnits</code> attribute.</p>

<p>You also must specify a reference point <code class="highlighter-rouge">refX</code>/<code class="highlighter-rouge">refY</code>, which is the point in the marker‚Äôs <code class="highlighter-rouge">viewBox</code> that gets pinned to the segment start/end point.</p>

<p>By default, markers will not rotate.
To automatically rotate markers with the stroke, set the <code class="highlighter-rouge">orient</code> attribute to <code class="highlighter-rouge">auto</code>.
This aligns the positive x axis of the marker <code class="highlighter-rouge">viewBox</code> to the angle of the stroke at the point where the marker is attached.
<code class="highlighter-rouge">auto-start-reverse</code> will rotate the marker like <code class="highlighter-rouge">auto</code>, except the marker at the start of the stroke will be rotated an extra 180 degrees.
This is useful for bi-directional arrows, and is likely what you will want most of the time.</p>

<p>Unfortunately, the <code class="highlighter-rouge">fill</code> and <code class="highlighter-rouge">stroke</code> of the marker shape itself cannot be made to automatically match the color of the stroke it is attached to; they must be set manually.
This may change in future versions of SVG.</p>

<h4 class="break_before" id="--exercise-6"><i class="fas fa-lg fa-flag-checkered"></i>  EXERCISE 6</h4>

<figure>
  <a href="images/exercises/exercise-6.svg" target="_blank">
    <img src="images/exercises/exercise-6.svg" alt="exercises/exercise-6.svg" class="large_img" />
  </a>
  <figcaption></figcaption>
</figure>

<p>Recreate this SVG using the techniques covered so far.
The exact colors, lengths, and dimensions are not important; just try to capture the basic picture.</p>

      </section>
    
  
    
      <section>
        <h3 id="conclusion">Conclusion</h3>

<h4 id="beyond">Beyond</h4>

<p>There are many other advanced capabilities that SVG has to offer; too many to cover in a single tutorial:</p>

<ul>
  <li>All sorts of metadata ‚Äì like <code class="highlighter-rouge">&lt;title&gt;</code> and <code class="highlighter-rouge">&lt;desc&gt;</code> ‚Äì can be embedded that can serve various purposes for users and editing software</li>
  <li>Custom <code class="highlighter-rouge">&lt;pattern&gt;</code>‚Äôs (eg checkerboard) can be defined and used for <code class="highlighter-rouge">fill</code> or <code class="highlighter-rouge">stroke</code></li>
  <li>Shapes can be cut out of and into other shapes using <code class="highlighter-rouge">&lt;clipPath&gt;</code> and <code class="highlighter-rouge">&lt;mask&gt;</code></li>
  <li>You can draw holes into single shapes using the special <code class="highlighter-rouge">evenodd</code> fill rule</li>
  <li>You can write text along arbitrary paths using <code class="highlighter-rouge">&lt;textPath&gt;</code></li>
  <li>For images with a lot of duplicate objects, you can define an object once and reference it from other places in the image</li>
  <li>You can create custom filters to produce all sorts of interesting visual effects</li>
  <li>Presentation attributes can be animated with CSS <code class="highlighter-rouge">@keyframes</code> to make cool animations</li>
  <li>Various external sources can be embedded into SVGs, including raster images, HTML elements, and even other SVGs</li>
  <li>‚Ä¶and much more</li>
</ul>

<figure>
  <a href="images/9-conclusion/beyond-1.svg" target="_blank">
    <img src="images/9-conclusion/beyond-1.svg" alt="Pattern" class="" />
  </a>
  <figcaption>Pattern</figcaption>
</figure>

<figure>
  <a href="images/9-conclusion/beyond-2.svg" target="_blank">
    <img src="images/9-conclusion/beyond-2.svg" alt="Mask" class="" />
  </a>
  <figcaption>Mask</figcaption>
</figure>

<figure>
  <a href="images/9-conclusion/greene-lab-animated.svg" target="_blank">
    <img src="images/9-conclusion/greene-lab-animated.svg" alt="Animation" class="" />
  </a>
  <figcaption>Animation</figcaption>
</figure>

<h4 id="wrap-up">Wrap-up</h4>

<p>SVG is a <a href="https://www.w3.org/TR/SVG/">giant and complex specification</a>.
What has been covered in this tutorial is hopefully 90% of what you will ever need, but it is still only the tip of the iceberg in terms of the number of features and concepts.</p>

<p>When you Google for help, or when you open a software-generated SVG, you will likely see many things you don‚Äôt understand.
This is okay and normal, even for people who have worked with SVG a lot.</p>

<p>You‚Äôll run into thing that are legacy: old features that have been deprecated but are still included to support really old software.
Always check to see if it‚Äôs something you really need.</p>

<p>And you‚Äôll run into things that are cutting edge: proposed additions to the specification that are very new and not widely supported yet.
Always test your images on multiple devices/browsers/platforms to make sure they work reliably.</p>

      </section>
    
  
    
  
</main>

<footer>
  <section>
    
    <div class="col">
  <a href="https://creativecommons.org/licenses/by/4.0/">
    <span>Licensed under</span>
    <img src="images/cc.svg" class="cc_icon" />
    <img src="images/by.svg" class="cc_icon" />
    <span>CC BY 4.0</span>
  </a>
</div>
<div class="col">
  <a href="https://www.greenelab.com/">
    <img src="images/greene-lab.svg" class="greene_lab" />
    <span>A project of the Greene Lab</span>
  </a>
</div>

  </section>
</footer>
:ET