I"fU<h3 id="basics">Basics</h3>

<h4 id="how-svgs-are-written">How SVGs are written</h4>

<p>SVGs are just plain text files that contain descriptions of what shapes to draw.
You can create or edit them in any text editor.
You can also use software like Inkscape or Adobe Illustrator to make more complex SVGs, but they are still saved and represented as plain text.</p>

<p>SVGs are written in a simple markup language called <a href="https://en.wikipedia.org/wiki/XML">XML</a> that consists of three main concepts:</p>

<ol>
  <li>Elements - the individual components or building blocks of your image</li>
  <li>Element attributes - the properties attached to an element that describes its appearance, behavior, etc</li>
  <li>Element hierarchy - the organizational structure of the document, formed by arranging elements in an order or nesting them within one another</li>
</ol>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;element</span> <span class="na">attribute=</span><span class="s">"value"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;child</span> <span class="na">attribute=</span><span class="s">"value"</span><span class="nt">&gt;</span>
    ...more content...
  <span class="nt">&lt;/child&gt;</span>
  <span class="nt">&lt;child</span> <span class="na">attribute=</span><span class="s">"value"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/element&gt;</span>
<span class="c">&lt;!-- comment --&gt;</span>
</code></pre></div></div>

<p>Element with children elements inside:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;element&gt;&lt;child&gt;</span>...<span class="nt">&lt;/child&gt;&lt;/element&gt;</span>
</code></pre></div></div>

<p>Element with attribute:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;element</span> <span class="na">attribute=</span><span class="s">"value"</span><span class="nt">&gt;</span>...<span class="nt">&lt;/element&gt;</span>
</code></pre></div></div>

<p>Self-closing/empty element:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;element</span> <span class="na">attribute=</span><span class="s">"value"</span> <span class="nt">/&gt;</span>
</code></pre></div></div>

<p><i class="fas fa-lg fa-info-circle"></i>Note: XML is generally whitespace-insensitive, so you’ll see slightly different ways to format the code throughout this tutorial and in online examples.</p>

<h4 id="coordinate-system">Coordinate system</h4>

<p>An SVG has an abstract coordinate system with arbitrary units called “SVG units” or “user units”.
It is a regular Cartesian coordinate space – except that <strong>positive is down and to the right</strong> – that eventually gets mapped to some real world space.</p>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;element</span>
  <span class="na">some-coordinate=</span><span class="s">"-100"</span>
  <span class="na">some-dimension=</span><span class="s">"34.5"</span>
<span class="nt">&gt;</span>
</code></pre></div></div>

<div class="col">
  <a href="images/2-basics/coordinates.svg" target="_blank">
    <img src="images/2-basics/coordinates.svg" alt="2-basics/coordinates.svg" />
  </a>
</div>

<p>Unless specified otherwise, <strong>the coordinates/dimensions/etc of everything are given in SVG units</strong>, as plain numerical values.</p>

<h4 id="the-svg-element">The <code class="highlighter-rouge">&lt;svg&gt;</code> element</h4>

<p>In every SVG, there is a top level <code class="highlighter-rouge">&lt;svg&gt;</code> element that contains all of the contents of the image and some key properties of the image. There are only 4 attributes you will likely ever use in this element: <code class="highlighter-rouge">xmlns</code>, <code class="highlighter-rouge">viewBox</code>, <code class="highlighter-rouge">width</code>, and <code class="highlighter-rouge">height</code>.</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;svg</span>
  <span class="na">xmlns=</span><span class="s">"http://www.w3.org/2000/svg"</span>
  <span class="na">viewBox=</span><span class="s">"..."</span>
  <span class="na">width=</span><span class="s">"..."</span>
  <span class="na">height=</span><span class="s">"..."</span>
<span class="nt">&gt;</span>
  ...
<span class="nt">&lt;/svg&gt;</span>
</code></pre></div></div>

<p>In SVGs generated by software, you will often see many other attributes and elements at or near the top-level of the document.
Many of these are unnecessary, or only necessary in very specific contexts.
Most likely, they are there either to support legacy browsers or older versions of SVG.
When in doubt, just remove a line and see if it still works.</p>

<h4 id="the-xmlns-attribute">The <code class="highlighter-rouge">xmlns</code> attribute</h4>

<p>The <code class="highlighter-rouge">xmlns</code> attribute is a namespace that simply tells the viewing software that the XML document is meant to be parsed as an SVG.
It is always required, except in the rare case that you are including an SVG directly (inline) in an HTML document.
There are also some advanced SVG features that require providing additional namespaces.</p>

<h4 id="the-viewbox-attribute">The <code class="highlighter-rouge">viewBox</code> attribute</h4>

<p>The viewbox is the window into the SVG’s coordinate space, and defines the boundaries of the image.
You can think of it like a camera or a frame, or as the cropped area of the scene.
You specify the <code class="highlighter-rouge">x</code>/<code class="highlighter-rouge">y</code> coordinate of the upper left corner and the <code class="highlighter-rouge">width</code>/<code class="highlighter-rouge">height</code> of the viewbox, in SVG units.</p>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;svg</span>
  <span class="na">viewBox=</span><span class="s">"x y width height"</span>
  <span class="na">viewBox=</span><span class="s">"70 60 100 75"</span>
<span class="nt">&gt;</span>
</code></pre></div></div>

<div class="col">
  <a href="images/2-basics/viewbox.svg" target="_blank">
    <img src="images/2-basics/viewbox.svg" alt="2-basics/viewbox.svg" />
  </a>
</div>

<p><i class="fas fa-lg fa-exclamation-triangle"></i><code class="highlighter-rouge">viewBox</code> should always be specified; weird things can happen if it isn’t.</p>

<h4 id="width-and-height">Width and height</h4>

<p>The <code class="highlighter-rouge">width</code> and <code class="highlighter-rouge">height</code> attributes indicate how wide and high the viewbox (the image) should appear – in real world size – in its final context.
They are the only SVG attributes that should have a specified unit.
If no unit is specified, they are interpreted as pixels.</p>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;svg</span>
  <span class="na">width=</span><span class="s">"..."</span> <span class="na">height=</span><span class="s">"..."</span>
  <span class="na">width=</span><span class="s">"4in"</span> <span class="na">height=</span><span class="s">"3in"</span>
<span class="nt">&gt;</span>
</code></pre></div></div>

<div class="col">
  <a href="images/2-basics/width-height.svg" target="_blank">
    <img src="images/2-basics/width-height.svg" alt="2-basics/width-height.svg" />
  </a>
</div>

<p>Along with <code class="highlighter-rouge">viewBox</code>, these attributes essentially define a mapping from SVG units to real world units.</p>

<p>If these attributes are omitted entirely, the image will usually be scaled to fit the dimensions of its container, depending on the software.
If you specify only one of these attributes, the other dimension will scale proportionally (preserving aspect ratio).</p>

<p>In practice, it is often more useful to not hard-code these attributes into the SVG, and to simply scale the image in situ to the needed size (eg, in CSS for a webpage, or in Inkscape before rendering as a PNG).
As such, the minimum/boilerplate code to form a valid SVG is an <code class="highlighter-rouge">&lt;svg&gt;</code> element with the <code class="highlighter-rouge">xmlns</code> and <code class="highlighter-rouge">viewBox</code> attributes.</p>

<h4 id="overflow">Overflow</h4>

<p>The “overflow” of an SVG is the content of the scene that extends beyond the boundaries of the <code class="highlighter-rouge">viewBox</code>.
By default, the <code class="highlighter-rouge">overflow</code> attribute on the <code class="highlighter-rouge">&lt;svg&gt;</code> element is set to <code class="highlighter-rouge">visible</code>.
This can be confusing, since we previously said that the <code class="highlighter-rouge">viewBox</code> defines the boundaries of an image; and is it really a boundary if things can go past it?</p>

<p>Most SVG editing software will treat the <code class="highlighter-rouge">viewBox</code> as a hard boundary, in that when you render it to a raster image (eg <code class="highlighter-rouge">.jpg</code>), it will chop off the overflow.
But while editing, it may still show the overflow, along with some lines to indicate where the <code class="highlighter-rouge">viewBox</code> is.</p>

<p>A web browser, though, will always show the overflow, unless you change the <a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/overflow"><code class="highlighter-rouge">overflow</code> attribute</a>, or your window is the same aspect ratio as your <code class="highlighter-rouge">viewBox</code> (since browsers typically <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit">fit to contain rather than fit to cover</a>).</p>

<h4 id="units">Units</h4>

<p>It is actually possible to specify coordinates/dimensions/etc in terms of “real world units” like inches, but it is typically not advisable.</p>

<div class="col highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"1px"  →  "1"
"1in"  →  "96"
"1cm"  →  "37.795"
"1pt"  →  "1.333"
</code></pre></div></div>

<div class="col">
  <a href="images/2-basics/units.svg" target="_blank">
    <img src="images/2-basics/units.svg" alt="2-basics/units.svg" />
  </a>
</div>

<p>Any time a real world unit is written, it first gets converted to SVG units based on constants defined in the SVG standard.
Then, the element is positioned and scaled within (relative to) the <code class="highlighter-rouge">viewBox</code> you specified.
Then, the <code class="highlighter-rouge">viewBox</code> is sized by the viewing software to make the image appear the real world <code class="highlighter-rouge">width</code> and <code class="highlighter-rouge">height</code> you specified, (hopefully) taking into consideration your monitor’s resolution/dpi.</p>

<p>Because of this pipeline, specifying real world units is prone to error.
You might not produce the actual size you intend.</p>

<p><i class="fas fa-lg fa-check-circle"></i><strong>Bottom line</strong>: Write SVGs without units, except for the <code class="highlighter-rouge">width</code> and <code class="highlighter-rouge">height</code> attributes on the <code class="highlighter-rouge">&lt;svg&gt;</code> element itself.
It is standard practice; and most SVG editing software seems to generate SVGs in this manner by default.
It is also in line with the main purpose of SVGs, which is to create images that are independent of actual size.</p>

<p><a href="https://oreillymedia.github.io/Using_SVG/guide/units.html"><i class="fas fa-lg fa-external-link-alt"></i>SVG Units explained</a></p>

<h4 id="units-example">Units example</h4>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;svg</span>
  <span class="na">viewBox=</span><span class="s">"0 0 96 96"</span>
  <span class="na">width=</span><span class="s">"4in"</span>
  <span class="na">height=</span><span class="s">"4in"</span>
<span class="nt">&gt;</span>
  ...a square with width and height set to "0.5in", centered in the viewbox
<span class="nt">&lt;/svg&gt;</span>
</code></pre></div></div>

<p><i class="fas fa-lg fa-question-circle"></i>Consider the above example.
Assuming the software that views the SVG does a good job, what should the final real world size of the square be?<br />
<i class="fas fa-lg fa-exclamation-circle"></i>Answer: <span class="spoiler">2in x 2in</span></p>

<h4 id="stroke-and-fill">Stroke and fill</h4>

<p>Before getting into drawing basic shapes, it is necessary to understand the <code class="highlighter-rouge">stroke</code> and <code class="highlighter-rouge">fill</code> attributes.
The <code class="highlighter-rouge">stroke</code> is the outline of a shape, and the <code class="highlighter-rouge">fill</code> is the area within a shape.
Both attributes can be set to a color, or to <code class="highlighter-rouge">none</code> to be disabled.</p>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;element</span>
  <span class="na">fill=</span><span class="s">"..."</span>     <span class="na">stroke=</span><span class="s">"..."</span>
  <span class="na">fill=</span><span class="s">"skyblue"</span> <span class="na">stroke=</span><span class="s">"blue"</span>
<span class="nt">&gt;</span>
</code></pre></div></div>

<div class="col">
  <a href="images/2-basics/fill-stroke.svg" target="_blank">
    <img src="images/2-basics/fill-stroke.svg" alt="2-basics/fill-stroke.svg" />
  </a>
</div>

<p>By default, SVG shapes have <code class="highlighter-rouge">fill="black"</code> and <code class="highlighter-rouge">stroke="none"</code>; <em>even shapes that are intended to be just strokes, like lines</em>.
You will likely have to override this frequently.</p>

<p>By default, the <code class="highlighter-rouge">stroke</code> is shown in front of the <code class="highlighter-rouge">fill</code>.
Unfortunately, there is no reliable way to switch this order.</p>

<p><i class="fas fa-lg fa-sticky-note"></i>Special note: You may also come across the value <code class="highlighter-rouge">currentColor</code>.
This makes the <code class="highlighter-rouge">fill</code> or <code class="highlighter-rouge">stroke</code> match the “active” color in whatever is viewing the SVG.
This is really only relevant in web development, where, for example, you may want an SVG icon to automatically match the color of the text it is inline with.
If there is no “current color” to use, it will default to black.</p>

<h4 id="color">Color</h4>

<p>Color theory is a complex topic that merits its own independent study.
But for the purposes of being able to dive right into creating images, here is a brief explanation.</p>

<p>There are several ways to specify colors in SVG:</p>
<div class="table_container">

  <table>
    <thead>
      <tr>
        <th style="text-align: left">Method</th>
        <th style="text-align: center">Normal (opaque)</th>
        <th style="text-align: center">With transparency</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td style="text-align: left">Named</td>
        <td style="text-align: center"><code class="highlighter-rouge">red</code></td>
        <td style="text-align: center">-</td>
      </tr>
      <tr>
        <td style="text-align: left">Hex</td>
        <td style="text-align: center"><code class="highlighter-rouge">#ff0000</code></td>
        <td style="text-align: center"><code class="highlighter-rouge">#ff0000aa</code></td>
      </tr>
      <tr>
        <td style="text-align: left">Hex shorthand</td>
        <td style="text-align: center"><code class="highlighter-rouge">#f00</code></td>
        <td style="text-align: center"><code class="highlighter-rouge">#f00a</code></td>
      </tr>
      <tr>
        <td style="text-align: left">Red, Green, Blue</td>
        <td style="text-align: center"><code class="highlighter-rouge">rgb(255, 0, 0)</code></td>
        <td style="text-align: center"><code class="highlighter-rouge">rgba(255, 0, 0, 0.66)</code></td>
      </tr>
      <tr>
        <td style="text-align: left">Hue, Saturation, Luminance</td>
        <td style="text-align: center"><code class="highlighter-rouge">hsl(0, 0%, 100%)</code></td>
        <td style="text-align: center"><code class="highlighter-rouge">hsla(0, 0%, 100%, 0.66)</code></td>
      </tr>
    </tbody>
  </table>

</div>

<p><strong>HSL</strong> splits colors into: <strong>hue</strong> – <em>what</em> color it is (red vs green vs purple), <strong>saturation</strong> – how <em>much</em> color there is (black/white vs colorful), and <strong>luminance</strong> – how bright it is (dark vs light).</p>

<p><strong>RGB</strong> splits colors into <strong>red</strong>/<strong>green</strong>/<strong>blue</strong> components, between <code class="highlighter-rouge">0</code> and <code class="highlighter-rouge">255</code> (256 possible values). Balance the components in different proportions to get different hues. Increase/decrease all of the components to increase/decrease the brightness. All <code class="highlighter-rouge">0</code>’s = black, all <code class="highlighter-rouge">255</code>’s = white.</p>

<p><strong>Hex</strong> is just a more compact way to write RGB. The 0 to 255 range is compressed down to 2 hex digits, each with 16 possible values (<code class="highlighter-rouge">0</code>, <code class="highlighter-rouge">1</code>, <code class="highlighter-rouge">2</code>, <code class="highlighter-rouge">3</code>, <code class="highlighter-rouge">4</code>, <code class="highlighter-rouge">5</code>, <code class="highlighter-rouge">6</code>, <code class="highlighter-rouge">7</code>, <code class="highlighter-rouge">8</code>, <code class="highlighter-rouge">9</code>, <code class="highlighter-rouge">A</code>, <code class="highlighter-rouge">B</code>, <code class="highlighter-rouge">C</code>, <code class="highlighter-rouge">D</code>, <code class="highlighter-rouge">E</code>, <code class="highlighter-rouge">F</code>). The first two digits represent red, the next two green, and the next two blue.
<em>Hex colors are the most common way to write colors in web technologies.</em></p>

<p><strong>Hex shorthand</strong> is a more compact way to write a <strong>hex</strong> color, where each digit is simply duplicated to create a full <strong>hex</strong> color.</p>

<p><strong>Named</strong> colors are just regular (English) color names, like <code class="highlighter-rouge">red</code> or <code class="highlighter-rouge">violet</code>.</p>

<p>Non-named colors can also accept an additional <strong>alpha</strong> (<code class="highlighter-rouge">a</code>) parameter at the end, which will blend it with whatever content is behind it.</p>

<figure>
  <a href="images/2-basics/colors.svg" target="_blank">
    <img src="images/2-basics/colors.svg" alt="Illustration of hue, saturation, luminance, and alpha" class="" />
  </a>
  <figcaption>Illustration of hue, saturation, luminance, and alpha</figcaption>
</figure>

<p><a href="https://www.materialpalette.com/colors"><i class="fas fa-lg fa-external-link-alt"></i>Material design color palette</a><br />
<a href="https://htmlcolorcodes.com/color-chart/"><i class="fas fa-lg fa-external-link-alt"></i>Another nice color palette</a><br />
<a href="http://colormind.io/"><i class="fas fa-lg fa-external-link-alt"></i>AI-generated color palettes</a><br />
<a href="http://www.gradients.io/"><i class="fas fa-lg fa-external-link-alt"></i>Nice pairs of colors for gradients</a></p>

<h4 id="opacity">Opacity</h4>

<p>An element’s opacity defines how much it will blend in with whatever content is behind it, on a scale of <code class="highlighter-rouge">0</code> to <code class="highlighter-rouge">1</code>. An opacity of <code class="highlighter-rouge">1</code> will make an element completely opaque; <code class="highlighter-rouge">0</code> completely invisible; <code class="highlighter-rouge">0.5</code> half-way translucent.</p>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;element</span>
  <span class="na">opacity=</span><span class="s">"..."</span>
  <span class="na">opacity=</span><span class="s">"0.5"</span>
<span class="nt">&gt;</span>
</code></pre></div></div>

<div class="col">
  <a href="images/2-basics/opacity.svg" target="_blank">
    <img src="images/2-basics/opacity.svg" alt="2-basics/opacity.svg" />
  </a>
</div>

<p>There are also <code class="highlighter-rouge">fill-opacity</code> and <code class="highlighter-rouge">stroke-opacity</code> attributes to set the transparency of the fill and stroke separately, but they are not broadly supported yet.</p>

<h4 id="z-order">Z-order</h4>

<p>Elements are stacked in the order they appear in your SVG document.
Later defined elements are stacked on-top/in-front of earlier defined elements.</p>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- 1 --&gt;</span>
<span class="nt">&lt;rect</span> <span class="nt">/&gt;</span>
<span class="c">&lt;!-- 2 --&gt;</span>
<span class="nt">&lt;rect</span> <span class="nt">/&gt;</span>
<span class="c">&lt;!-- 3 --&gt;</span>
<span class="nt">&lt;rect</span> <span class="nt">/&gt;</span>
</code></pre></div></div>

<div class="col">
  <a href="images/2-basics/z-order.svg" target="_blank">
    <img src="images/2-basics/z-order.svg" alt="2-basics/z-order.svg" />
  </a>
</div>

:ET