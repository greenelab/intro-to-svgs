I"ÌR<h3 id="special-concepts">Special Concepts</h3>

<h4 id="classes-and-ids">Classes and id‚Äôs</h4>

<p>The <code class="highlighter-rouge">id</code> and <code class="highlighter-rouge">class</code> attributes can be used to name/label elements so you can refer to them elsewhere in the document.
There is a wide range of valid syntaxes for these names, but it is convention to only use letters, numbers, underscores, or dashes.
Notably, the names cannot start with a number.</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;element</span> <span class="na">id=</span><span class="s">"unique_thing"</span> <span class="nt">/&gt;</span>

<span class="nt">&lt;element</span> <span class="na">class=</span><span class="s">"generic_type"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;element</span> <span class="na">class=</span><span class="s">"generic_type"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;element</span> <span class="na">class=</span><span class="s">"generic_type another_type"</span> <span class="nt">/&gt;</span>
</code></pre></div></div>

<p>An <code class="highlighter-rouge">id</code> is meant to reference a specific instance of an object; an object that is unique, and only appears once in the document.</p>

<p>A <code class="highlighter-rouge">class</code> is meant to reference a type of object that there are multiple instances of throughout the document.
You can also apply several classes to a single object by separating the class names by space.</p>

<p>You will see SVG editing software output a lot of generated ids and classes.
They normally not very descriptive or useful, and can often be removed.</p>

<h4 id="css-and-the-style-element">CSS and the <code class="highlighter-rouge">&lt;style&gt;</code> element</h4>

<p>Recall that SVG is defined by the same people who define web standards like <a href="https://en.wikipedia.org/wiki/HTML">HTML</a> and <a href="https://en.wikipedia.org/wiki/Cascading_Style_Sheets">CSS</a>.
As such, there is a lot of crossover and overlap between the standards, making it very confusing for people trying to learn them.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;style&gt;</span>
  <span class="nt">element</span> <span class="p">{</span>
    <span class="py">attribute</span><span class="p">:</span> <span class="n">value</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nf">#id_name</span> <span class="p">{</span>
  <span class="p">}</span>
  <span class="nc">.class_name</span> <span class="p">{</span>
  <span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
</code></pre></div></div>

<p>Adding a <code class="highlighter-rouge">&lt;style&gt;</code> element to an SVG allows you to apply CSS styles to certain elements in the image.
A CSS style, for the purposes of SVG, is an alternative way to set an attribute.
Many of the attributes that have been covered in this tutorial so far can also be applied as a CSS style, with a slightly different syntax, as illustrated above.
The benefit of this approach is that you can apply properties to multiple elements in just one spot.</p>

<p>The special characters that precede the names are known as ‚Äú<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors">CSS selectors</a>‚Äù.
There are many more advanced selectors, but you will likely only ever use the id <code class="highlighter-rouge">#</code> and class <code class="highlighter-rouge">.</code> selectors.
Without a preceding character, you are referring to the type of element itself; ie the ‚Äúelement name‚Äù.
For example, <code class="highlighter-rouge">text { fill: red }</code> would apply a red fill to all <code class="highlighter-rouge">&lt;text&gt;</code> elements in the document, whether they have ids/classes or not.</p>

<p>Note that the <code class="highlighter-rouge">&lt;style&gt;</code> element itself is not visible; it is a definition element.
There are several other types of definition elements like this as well.</p>

<h4 id="valid-style-attributes-and-exceptions">Valid <code class="highlighter-rouge">&lt;style&gt;</code> attributes, and exceptions</h4>

<p>The attributes that can be applied with CSS styles are referred to as ‚Äú<a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/Presentation">presentation attributes</a>‚Äù.
In general, they are the properties that describe the ‚Äústyle‚Äù of elements, but not their geometry.
The attributes covered in this tutorial that can be applied with styles are:</p>

<p><code class="highlighter-rouge">fill</code> <code class="highlighter-rouge">stroke</code> <code class="highlighter-rouge">opacity</code> <code class="highlighter-rouge">stroke-width</code> <code class="highlighter-rouge">stroke-linecap</code> <code class="highlighter-rouge">stroke-linejoin</code> <code class="highlighter-rouge">stroke-dasharray</code> <code class="highlighter-rouge">stroke-dashoffset</code> <code class="highlighter-rouge">font-family</code> <code class="highlighter-rouge">font-size</code> <code class="highlighter-rouge">font-weight</code> <code class="highlighter-rouge">font-style</code> <code class="highlighter-rouge">text-decoration</code> <code class="highlighter-rouge">letter-spacing</code> <code class="highlighter-rouge">text-anchor</code> <code class="highlighter-rouge">dominant-baseline</code> <code class="highlighter-rouge">baseline-shift</code> <code class="highlighter-rouge">transform</code></p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;style&gt;</span>
  <span class="nf">#some_element</span> <span class="p">{</span>
    <span class="py">fill</span><span class="p">:</span> <span class="no">red</span><span class="p">;</span>
    <span class="py">stroke</span><span class="p">:</span> <span class="no">blue</span><span class="p">;</span>
    <span class="py">stroke-width</span><span class="p">:</span> <span class="m">10</span><span class="p">;</span>

    <span class="err">...</span>

    <span class="nl">transform</span><span class="p">:</span> <span class="n">translate</span><span class="p">(</span><span class="m">10px</span><span class="p">,</span><span class="m">5px</span><span class="p">)</span> <span class="n">rotate</span><span class="p">(</span><span class="m">45deg</span><span class="p">)</span> <span class="n">skewX</span><span class="p">(</span><span class="m">10deg</span><span class="p">);</span>
    <span class="nl">font-size</span><span class="p">:</span> <span class="m">12pt</span><span class="p">;</span>
    <span class="nl">letter-spacing</span><span class="p">:</span> <span class="m">2px</span><span class="p">;</span>
  <span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
</code></pre></div></div>

<p>Note some small differences: the transform attribute requires specifying units, and requires a comma between function parameters (a space is not valid).
The font-size and letter-spacing attributes also require units.
In general, if something is not working, check to see if the CSS version of the attribute requires a different syntax than the SVG version.</p>

<p>CSS also has significantly more transform functions than SVG, like <code class="highlighter-rouge">perspective</code> and <code class="highlighter-rouge">rotate3d</code>.
But use these in SVG with extreme caution; they are not likely to be supported in many programs.</p>

<h4 id="inline-styles">Inline styles</h4>

<p>To add more confusion, CSS styles can also be defined ‚Äúinline‚Äù, right on the element, in a <code class="highlighter-rouge">style</code> attribute.
This makes 3 ways you can specify the appearance of objects:</p>

<ol>
  <li>Attributes on the object</li>
  <li>CSS styles in <code class="highlighter-rouge">&lt;style&gt;</code> element</li>
  <li>Inline CSS styles</li>
</ol>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;element</span> <span class="na">attribute=</span><span class="s">"value"</span> <span class="nt">/&gt;</span>

<span class="nt">&lt;style&gt;</span>
  <span class="nf">#some_element</span> <span class="p">{</span>
    <span class="py">attribute</span><span class="p">:</span> <span class="n">value</span><span class="p">;</span>
  <span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>

<span class="nt">&lt;element</span> <span class="na">style=</span><span class="s">"attribute: value; attribute: value; attribute: value"</span> <span class="nt">/&gt;</span>
</code></pre></div></div>

<p>For most purposes, these will all yield the same result.
The main difference is that they have different priorities when there are overlapping/conflicting properties for a particular element.</p>

<p>There is no consensus about which of these to use and when.
SVG editing software will often prefer inline CSS styles, perhaps because they have the highest/final priority.</p>

<h4 id="style-example"><code class="highlighter-rouge">&lt;style&gt;</code> example</h4>

<p>Here is an example of using a combination of CSS selectors: element name, id name, and class name.</p>

<div class="language-html col highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;style&gt;</span>
  <span class="nt">text</span> <span class="p">{</span> <span class="nl">font-family</span><span class="p">:</span> <span class="n">Pacifico</span><span class="p">;</span> <span class="p">}</span>
  <span class="nf">#company</span> <span class="p">{</span> <span class="nl">font-size</span><span class="p">:</span> <span class="m">20pt</span><span class="p">;</span> <span class="p">}</span>
  <span class="nc">.blue</span> <span class="p">{</span> <span class="py">fill</span><span class="p">:</span> <span class="no">blue</span><span class="p">;</span> <span class="p">}</span>
  <span class="nc">.dot</span> <span class="p">{</span> <span class="nl">opacity</span><span class="p">:</span> <span class="m">0.5</span><span class="p">;</span> <span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>

<span class="nt">&lt;text</span> <span class="na">id=</span><span class="s">"company"</span> <span class="na">class=</span><span class="s">"blue"</span><span class="nt">&gt;</span>
  Twiddr
<span class="nt">&lt;/text&gt;</span>
<span class="nt">&lt;circle</span> <span class="na">class=</span><span class="s">"blue dot"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;circle</span> <span class="na">class=</span><span class="s">"blue dot"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;circle</span> <span class="na">class=</span><span class="s">"blue dot"</span> <span class="nt">/&gt;</span>
</code></pre></div></div>

<div class="col">
  <a href="images/8-special-concepts/style.svg" target="_blank">
    <img src="images/8-special-concepts/style.svg" alt="8-special-concepts/style.svg" />
  </a>
</div>

<p><i class="fas fa-lg fa-sticky-note"></i>Special note: If you want to use an online font but don‚Äôt want to install it on your system, you can dynamically import the font from a url like this:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;style&gt;</span>
  <span class="k">@import</span> <span class="sx">url('https://fonts.googleapis.com/css?family=Pacifico')</span><span class="p">;</span>

  <span class="nf">#some_element</span> <span class="p">{</span>
    <span class="nl">font-family</span><span class="p">:</span> <span class="n">Pacifico</span>
  <span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
</code></pre></div></div>

<h4 id="gradients">Gradients</h4>

<p>The <code class="highlighter-rouge">&lt;defs&gt;</code> element, like the <code class="highlighter-rouge">&lt;style&gt;</code> element, is used to define special things that aren‚Äôt shown in the image but can be referenced elsewhere in the document.
Gradients are one such thing.</p>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;defs&gt;</span>
  <span class="nt">&lt;linearGradient</span>
    <span class="na">id=</span><span class="s">"rainbow"</span>
    <span class="na">x1=</span><span class="s">"0%"</span>
    <span class="na">y1=</span><span class="s">"100%"</span>
    <span class="na">x2=</span><span class="s">"100%"</span>
    <span class="na">y2=</span><span class="s">"0%"</span>
  <span class="nt">&gt;</span>
    <span class="nt">&lt;stop</span>
      <span class="na">offset=</span><span class="s">"0%"</span>
      <span class="na">stop-color=</span><span class="s">"red"</span>
    <span class="nt">/&gt;</span>
    ...
    <span class="nt">&lt;stop</span>
      <span class="na">offset=</span><span class="s">"50%"</span>
      <span class="na">stop-color=</span><span class="s">"blue"</span>
    <span class="nt">/&gt;</span>
    ...
    <span class="nt">&lt;stop</span>
      <span class="na">offset=</span><span class="s">"100%"</span>
      <span class="na">stop-color=</span><span class="s">"orange"</span>
    <span class="nt">/&gt;</span>
  <span class="nt">&lt;/linearGradient&gt;</span>
<span class="nt">&lt;/defs&gt;</span>

<span class="nt">&lt;rect</span> <span class="na">fill=</span><span class="s">"url('#rainbow')"</span> <span class="nt">/&gt;</span>
</code></pre></div></div>

<div class="col">
  <a href="images/8-special-concepts/gradient.svg" target="_blank">
    <img src="images/8-special-concepts/gradient.svg" alt="8-special-concepts/gradient.svg" />
  </a>
</div>

<p>Gradients can be used as <code class="highlighter-rouge">fill</code>‚Äôs or <code class="highlighter-rouge">stroke</code>‚Äôs instead of a solid color.
There are two kinds of gradients you can specify: <code class="highlighter-rouge">&lt;linearGradient&gt;</code> and <code class="highlighter-rouge">&lt;radialGradient&gt;</code> (unfortunately there is no angular gradient).
You can specify the start (<code class="highlighter-rouge">x1</code>/<code class="highlighter-rouge">y1</code>) and stop (<code class="highlighter-rouge">x2</code>/<code class="highlighter-rouge">y2</code>) position of the gradient in terms of % (relative to the dimensions of whatever object it is applied to).
You can add any color ‚Äústops‚Äù that you need, specifying their % through the gradient (<code class="highlighter-rouge">offset</code>), their color (<code class="highlighter-rouge">stop-color</code>), and their opacity (<code class="highlighter-rouge">stop-opacity</code>) if needed.
There are several other parameters available to tweak the appearance, but these are the most commonly needed.</p>

<p>To apply a gradient to an object, first give the gradient an <code class="highlighter-rouge">id</code>, then set the <code class="highlighter-rouge">fill</code> or <code class="highlighter-rouge">stroke</code> of your object to <code class="highlighter-rouge">url('#the_id')</code>.</p>

<h4 id="markers">Markers</h4>

<p>Markers are another thing that go in the <code class="highlighter-rouge">&lt;defs&gt;</code> element.</p>

<p>Markers are a way to define arrow heads or point markers on the <code class="highlighter-rouge">stroke</code> of <code class="highlighter-rouge">&lt;line&gt;</code>‚Äôs, <code class="highlighter-rouge">&lt;polygons&gt;</code>‚Äôs, <code class="highlighter-rouge">&lt;polyline&gt;</code>‚Äôs, or <code class="highlighter-rouge">&lt;path&gt;</code>‚Äôs.
They can be any shape you want, and can be placed at the start of a stroke, the end of a stroke, and at the mid-points (where separate segments join) of a stroke: <code class="highlighter-rouge">marker-start</code>, <code class="highlighter-rouge">marker-end</code>, and <code class="highlighter-rouge">marker-mid</code>, respectively.</p>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;defs&gt;</span>
  <span class="nt">&lt;marker</span>
    <span class="na">id=</span><span class="s">"arrow"</span>
    <span class="na">orient=</span><span class="s">"auto-start-reverse"</span>
  <span class="nt">&gt;</span>
    ...
  <span class="nt">&lt;/marker&gt;</span>
  <span class="nt">&lt;marker</span> <span class="na">id=</span><span class="s">"dot"</span> <span class="na">orient=</span><span class="s">"auto"</span><span class="nt">&gt;</span>
    ...
  <span class="nt">&lt;/marker&gt;</span>
<span class="nt">&lt;/defs&gt;</span>

<span class="nt">&lt;path</span>
  <span class="na">marker-start=</span><span class="s">"url('#arrow')"</span>
  <span class="na">marker-mid=</span><span class="s">"url('#dot')"</span>
  <span class="na">marker-end=</span><span class="s">"url('#arrow')"</span>
<span class="nt">/&gt;</span>
</code></pre></div></div>

<div class="col">
  <a href="images/8-special-concepts/marker-1.svg" target="_blank">
    <img src="images/8-special-concepts/marker-1.svg" alt="8-special-concepts/marker-1.svg" />
  </a>
</div>

<p>The way markers are defined are essentially as their own mini-SVG within the main SVG.
You specify a <code class="highlighter-rouge">viewBox</code> attribute for the marker shape, as well as a <code class="highlighter-rouge">width</code> and <code class="highlighter-rouge">height</code>.
The <code class="highlighter-rouge">viewBox</code> determines the visible area and coordinate space, and the <code class="highlighter-rouge">width</code>/<code class="highlighter-rouge">height</code> determine the resulting size that the area is scaled to.</p>

<div class="language-xml col highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;defs&gt;</span>
  <span class="nt">&lt;marker</span>
    <span class="na">id=</span><span class="s">"arrowhead"</span>
    <span class="na">viewBox=</span><span class="s">"0 0 10 8"</span>
    <span class="na">refX=</span><span class="s">"5"</span>
    <span class="na">refY=</span><span class="s">"4"</span>
    <span class="na">markerWidth=</span><span class="s">"5"</span>
    <span class="na">markerHeight=</span><span class="s">"4"</span>
    <span class="na">orient=</span><span class="s">"auto-start-reverse"</span>
  <span class="nt">&gt;</span>
    <span class="nt">&lt;polygon</span> <span class="na">points=</span><span class="s">"... shape ..."</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/marker&gt;</span>
<span class="nt">&lt;/defs&gt;</span>
</code></pre></div></div>

<div class="col">
  <a href="images/8-special-concepts/marker-2.svg" target="_blank">
    <img src="images/8-special-concepts/marker-2.svg" alt="8-special-concepts/marker-2.svg" />
  </a>
</div>

<p>One difference, though, is that <code class="highlighter-rouge">markerWidth</code> and <code class="highlighter-rouge">markerHeight</code>, by default, are multiplied by the <code class="highlighter-rouge">stroke-width</code> of the stroke that the marker is attached to.
For example, if they are set to <code class="highlighter-rouge">5</code>, and the stroke using the marker has a thickness of <code class="highlighter-rouge">3</code>, the resulting size (in SVG units) of the marker will be <code class="highlighter-rouge">15</code>x<code class="highlighter-rouge">15</code>.
You can make a marker an absolute/constant size by changing the <code class="highlighter-rouge">markerUnits</code> attribute.</p>

<p>You also must specify a reference point <code class="highlighter-rouge">refX</code>/<code class="highlighter-rouge">refY</code>, which is the point in the marker‚Äôs <code class="highlighter-rouge">viewBox</code> that gets pinned to the segment start/end point.</p>

<p>By default, markers will not rotate.
To automatically rotate markers with the stroke, set the <code class="highlighter-rouge">orient</code> attribute to <code class="highlighter-rouge">auto</code>.
This aligns the positive x axis of the marker <code class="highlighter-rouge">viewBox</code> to the angle of the stroke at the point where the marker is attached.
<code class="highlighter-rouge">auto-start-reverse</code> will rotate the marker like <code class="highlighter-rouge">auto</code>, except the marker at the start of the stroke will be rotated an extra 180 degrees.
This is useful for bi-directional arrows, and is likely what you will want most of the time.</p>

<p>Unfortunately, the <code class="highlighter-rouge">fill</code> and <code class="highlighter-rouge">stroke</code> of the marker shape itself cannot be made to automatically match the color of the stroke it is attached to; they must be set manually.
This may change in future versions of SVG.</p>

<h4 class="break_before" id="--exercise-6"><i class="fas fa-lg fa-flag-checkered"></i>  EXERCISE 6</h4>

<figure>
  <a href="images/exercises/exercise-6.svg" target="_blank">
    <img src="images/exercises/exercise-6.svg" alt="exercises/exercise-6.svg" class="large_img" />
  </a>
  <figcaption></figcaption>
</figure>

<p>Recreate this SVG using the techniques covered so far.
The exact colors, lengths, and dimensions are not important; just try to capture the basic picture.</p>
:ET